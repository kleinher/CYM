
LedRGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  0000071e  000007b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000071e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  008001a6  008001a6  00000858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137c  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a07  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a85  00000000  00000000  000027ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00003230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000784  00000000  00000000  000035cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000087d  00000000  00000000  00003d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000045cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	45 02       	muls	r20, r21
  6a:	4d 02       	muls	r20, r29
  6c:	6b 02       	muls	r22, r27
  6e:	73 02       	muls	r23, r19
  70:	92 02       	muls	r25, r18
  72:	9a 02       	muls	r25, r26
  74:	b8 02       	muls	r27, r24

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ee e1       	ldi	r30, 0x1E	; 30
  8a:	f7 e0       	ldi	r31, 0x07	; 7
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a6 3a       	cpi	r26, 0xA6	; 166
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a6 ea       	ldi	r26, 0xA6	; 166
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 3f       	cpi	r26, 0xFA	; 250
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <main>
  ac:	0c 94 8d 03 	jmp	0x71a	; 0x71a <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <setupTimer>:
extern char BufferRX[32];
extern volatile int OCR0_PB5;
extern volatile int PWM_PB5;
/*Configuración del timer 0*/
void setupTimer(){
	TCCR0B=(1<<CS02)|(1<<CS00);	//configurar el registro del timer0 como temporizador con prescalador de 1024
  b4:	85 e0       	ldi	r24, 0x05	; 5
  b6:	85 bd       	out	0x25, r24	; 37
	TCCR0A=0x02;				// modo CTC
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	84 bd       	out	0x24, r24	; 36
	OCR0A=255;					//el registro empieza con valor 255
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bd       	out	0x27, r24	; 39
	TIMSK0|= (1<<OCIE0A);	    //habilita la interrupcion por desbordamiento del timer0
  c0:	ee e6       	ldi	r30, 0x6E	; 110
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <setupPines>:
}

void setupPines(){
	DDRB |= (1<<1)|(1<<2)|(0<<5);
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	84 b9       	out	0x04, r24	; 4
  d2:	08 95       	ret

000000d4 <setupADC>:
}

void setupADC(){
	ADCSRA = 0;
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	ADCSRB = 0;
  da:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	

	ADMUX |= (1 << REFS0)|(1 << MUX0)|(1 << MUX1); //set reference voltage
  de:	ac e7       	ldi	r26, 0x7C	; 124
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	83 64       	ori	r24, 0x43	; 67
  e6:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); //left align the ADC value- so we can read highest 8 bits from ADCH register only //
  e8:	8c 91       	ld	r24, X
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2); //prescalador ADC 128
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //enabble auto trigger
  f4:	80 81       	ld	r24, Z
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); //enable interrupts when measurement complete
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable ADC
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //start ADC measurements
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <__vector_14>:

/*
*Rutina de atención de interrupción Timer
*/
ISR(TIMER0_COMPA_vect)
{	
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
static int flag=0;
if(PWM_PB5==1){
 11c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <PWM_PB5>
 120:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <PWM_PB5+0x1>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	c1 f5       	brne	.+112    	; 0x198 <__vector_14+0x8a>
	if(OCR0_PB5>241){
 128:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <OCR0_PB5>
 12c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <OCR0_PB5+0x1>
 130:	82 3f       	cpi	r24, 0xF2	; 242
 132:	91 05       	cpc	r25, r1
 134:	24 f0       	brlt	.+8      	; 0x13e <__vector_14+0x30>
		//PORTB |= (1<<5); //no invertido
		PORTB &= ~(1<<5); //invertido
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	2d c0       	rjmp	.+90     	; 0x198 <__vector_14+0x8a>
	}
	else if(OCR0_PB5<8){
 13e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <OCR0_PB5>
 142:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <OCR0_PB5+0x1>
 146:	08 97       	sbiw	r24, 0x08	; 8
 148:	24 f4       	brge	.+8      	; 0x152 <__vector_14+0x44>
		//PORTB &= ~(1<<5); //no invertido
		PORTB |= (1<<5); //invertido
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	80 62       	ori	r24, 0x20	; 32
 14e:	85 b9       	out	0x05, r24	; 5
 150:	23 c0       	rjmp	.+70     	; 0x198 <__vector_14+0x8a>
	}
	else{
		if(flag==0){
 152:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <flag.2150>
 156:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <flag.2150+0x1>
 15a:	89 2b       	or	r24, r25
 15c:	81 f4       	brne	.+32     	; 0x17e <__vector_14+0x70>
			flag=1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <flag.2150+0x1>
 166:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <flag.2150>
			//PORTB &= ~(1<<5); // invertido
			PORTB |= (1<<5); // invertido
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	85 b9       	out	0x05, r24	; 5
			OCR0A=(256-OCR0_PB5);
 170:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <OCR0_PB5>
 174:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <OCR0_PB5+0x1>
 178:	81 95       	neg	r24
 17a:	87 bd       	out	0x27, r24	; 39
 17c:	0d c0       	rjmp	.+26     	; 0x198 <__vector_14+0x8a>
		}
		else {
			flag=0;
 17e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <flag.2150+0x1>
 182:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <flag.2150>
			//PORTB |= (1<<5); // no invertido
			PORTB &= ~(1<<5); // invertido
 186:	85 b1       	in	r24, 0x05	; 5
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	85 b9       	out	0x05, r24	; 5
			OCR0A=(OCR0_PB5-1);
 18c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <OCR0_PB5>
 190:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <OCR0_PB5+0x1>
 194:	81 50       	subi	r24, 0x01	; 1
 196:	87 bd       	out	0x27, r24	; 39
		}
	}
}
}
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_18>:

/*
*Rutina de atención de interrupción Terminal serie
*/
ISR(USART_RX_vect){
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	1f 92       	push	r1
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
	volatile char RX_Data = 0;
 1c6:	19 82       	std	Y+1, r1	; 0x01
	static short int Index=0;
	
	RX_Data = UDR0;				//Obtengo la información del terminal
 1c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1cc:	89 83       	std	Y+1, r24	; 0x01
	if(RX_Data != '\r'){		//si no es un salto de linea entonces almaceno caracter en el buffer
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	8d 30       	cpi	r24, 0x0D	; 13
 1d2:	89 f0       	breq	.+34     	; 0x1f6 <__vector_18+0x50>
		BufferRX[Index++] = RX_Data;
 1d4:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 1d8:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 1dc:	9c 01       	movw	r18, r24
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	30 93 a7 01 	sts	0x01A7, r19	; 0x8001a7 <__data_end+0x1>
 1e6:	20 93 a6 01 	sts	0x01A6, r18	; 0x8001a6 <__data_end>
 1ea:	29 81       	ldd	r18, Y+1	; 0x01
 1ec:	fc 01       	movw	r30, r24
 1ee:	eb 52       	subi	r30, 0x2B	; 43
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	20 83       	st	Z, r18
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <__vector_18+0x72>
	}
	else{						//Si es un salto de linea entonces
		BufferRX[Index]='\0';	//Determino el final del string
 1f6:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <__data_end>
 1fa:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <__data_end+0x1>
 1fe:	eb 52       	subi	r30, 0x2B	; 43
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	10 82       	st	Z, r1
		ProcesarInstruccion = true; //Activo flag para atención de instrucción
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <ProcesarInstruccion+0x1>
 20c:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <ProcesarInstruccion>
		Index=0;				//Vuelvo el indice al principio del vector
 210:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__data_end+0x1>
 214:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
	}
}
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_21>:

ISR(ADC_vect) {//when new ADC value ready
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
	newData = ADCH;//get value from A0 (POTENCIOME * 255)/1023
 242:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <newData+0x1>
 24c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <newData>
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <pwm>:
		actualizar_MEF();
		intensidad();
    }
}

void pwm(int pin,int num){
 25e:	9c 01       	movw	r18, r24
	TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10);//prescalar /1024
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	90 81       	ld	r25, Z
 266:	9d 60       	ori	r25, 0x0D	; 13
 268:	90 83       	st	Z, r25
	switch(pin){
 26a:	27 34       	cpi	r18, 0x47	; 71
 26c:	31 05       	cpc	r19, r1
 26e:	c9 f0       	breq	.+50     	; 0x2a2 <pwm+0x44>
 270:	22 35       	cpi	r18, 0x52	; 82
 272:	31 05       	cpc	r19, r1
 274:	29 f0       	breq	.+10     	; 0x280 <pwm+0x22>
 276:	22 34       	cpi	r18, 0x42	; 66
 278:	31 05       	cpc	r19, r1
 27a:	09 f0       	breq	.+2      	; 0x27e <pwm+0x20>
 27c:	40 c0       	rjmp	.+128    	; 0x2fe <pwm+0xa0>
 27e:	22 c0       	rjmp	.+68     	; 0x2c4 <pwm+0x66>
		case 'R':
			if(num>250)
 280:	6b 3f       	cpi	r22, 0xFB	; 251
 282:	71 05       	cpc	r23, r1
 284:	24 f0       	brlt	.+8      	; 0x28e <pwm+0x30>
				PORTB|=(1<<5);
 286:	85 b1       	in	r24, 0x05	; 5
 288:	80 62       	ori	r24, 0x20	; 32
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	08 95       	ret
			else {TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1A0);//fast pwm, inverted
 28e:	e0 e8       	ldi	r30, 0x80	; 128
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	81 6c       	ori	r24, 0xC1	; 193
 296:	80 83       	st	Z, r24
			OCR1A=num;}
 298:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 29c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2a0:	08 95       	ret
		break;
		case 'G':
			if(num>250)
 2a2:	6b 3f       	cpi	r22, 0xFB	; 251
 2a4:	71 05       	cpc	r23, r1
 2a6:	24 f0       	brlt	.+8      	; 0x2b0 <pwm+0x52>
				PORTB|=(1<<5);
 2a8:	85 b1       	in	r24, 0x05	; 5
 2aa:	80 62       	ori	r24, 0x20	; 32
 2ac:	85 b9       	out	0x05, r24	; 5
 2ae:	08 95       	ret
			else {TCCR1A |= (1<<WGM10)|(1<<COM1B1)|(1<<COM1B0);//fast pwm, inverted
 2b0:	e0 e8       	ldi	r30, 0x80	; 128
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	81 63       	ori	r24, 0x31	; 49
 2b8:	80 83       	st	Z, r24
			OCR1B=num;}
 2ba:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2be:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2c2:	08 95       	ret
		break;
		case 'B':
			if(num < 8){
 2c4:	68 30       	cpi	r22, 0x08	; 8
 2c6:	71 05       	cpc	r23, r1
 2c8:	24 f4       	brge	.+8      	; 0x2d2 <pwm+0x74>
				DDRB &= ~(1<<5);
 2ca:	84 b1       	in	r24, 0x04	; 4
 2cc:	8f 7d       	andi	r24, 0xDF	; 223
 2ce:	84 b9       	out	0x04, r24	; 4
 2d0:	08 95       	ret
			}
			else{
				if (num > 244)
 2d2:	65 3f       	cpi	r22, 0xF5	; 245
 2d4:	71 05       	cpc	r23, r1
 2d6:	34 f0       	brlt	.+12     	; 0x2e4 <pwm+0x86>
				{
					DDRB |= (1<<5);
 2d8:	84 b1       	in	r24, 0x04	; 4
 2da:	80 62       	ori	r24, 0x20	; 32
 2dc:	84 b9       	out	0x04, r24	; 4
					PORTB |= (1<<5);
 2de:	85 b1       	in	r24, 0x05	; 5
 2e0:	80 62       	ori	r24, 0x20	; 32
 2e2:	85 b9       	out	0x05, r24	; 5
				}
				DDRB |= (1<<5);
 2e4:	84 b1       	in	r24, 0x04	; 4
 2e6:	80 62       	ori	r24, 0x20	; 32
 2e8:	84 b9       	out	0x04, r24	; 4
				PWM_PB5=1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <PWM_PB5+0x1>
 2f2:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <PWM_PB5>
				OCR0_PB5=num;
 2f6:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <OCR0_PB5+0x1>
 2fa:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <OCR0_PB5>
 2fe:	08 95       	ret

00000300 <iniciar_MEF>:
		break;
	}
}

void iniciar_MEF(){
	estado=S0;
 300:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
	//PWM manual entre 7 y 248 anda joya (simulador)
	pwm('R',0);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	82 e5       	ldi	r24, 0x52	; 82
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm>
	pwm('G',0);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	87 e4       	ldi	r24, 0x47	; 71
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm>
	pwm('B',0);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	82 e4       	ldi	r24, 0x42	; 66
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm>
 328:	08 95       	ret

0000032a <intensidad>:
		case S6: pwm('R',RGB[0]); pwm('G',RGB[1]); pwm('B',RGB[2]); estado=S0;
		break;
	}
}

void intensidad(){
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29


	int test = (newData * 100)/(255);
 338:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 33c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 340:	44 e6       	ldi	r20, 0x64	; 100
 342:	48 9f       	mul	r20, r24
 344:	90 01       	movw	r18, r0
 346:	49 9f       	mul	r20, r25
 348:	30 0d       	add	r19, r0
 34a:	11 24       	eor	r1, r1
 34c:	a1 e8       	ldi	r26, 0x81	; 129
 34e:	b0 e8       	ldi	r27, 0x80	; 128
 350:	0e 94 44 03 	call	0x688	; 0x688 <__umulhisi3>
 354:	fc 01       	movw	r30, r24
 356:	ee 0f       	add	r30, r30
 358:	ef 2f       	mov	r30, r31
 35a:	ee 1f       	adc	r30, r30
 35c:	ff 0b       	sbc	r31, r31
 35e:	f1 95       	neg	r31
	int porcentajeB = test * ocrB;
	int finalR = (porcentajeR*255)/100;
	int finalG = (porcentajeG*255)/100;
	int finalB = (porcentajeB*255)/100;
	*/
	int finalR=RGB[0]*test/100;
 360:	c0 e0       	ldi	r28, 0x00	; 0
 362:	d1 e0       	ldi	r29, 0x01	; 1
 364:	28 81       	ld	r18, Y
 366:	39 81       	ldd	r19, Y+1	; 0x01
 368:	e2 9f       	mul	r30, r18
 36a:	c0 01       	movw	r24, r0
 36c:	e3 9f       	mul	r30, r19
 36e:	90 0d       	add	r25, r0
 370:	f2 9f       	mul	r31, r18
 372:	90 0d       	add	r25, r0
 374:	11 24       	eor	r1, r1
 376:	24 e6       	ldi	r18, 0x64	; 100
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	b9 01       	movw	r22, r18
 37c:	0e 94 2a 03 	call	0x654	; 0x654 <__divmodhi4>
 380:	7b 01       	movw	r14, r22
	int finalG=RGB[1]*test/100;
 382:	4a 81       	ldd	r20, Y+2	; 0x02
 384:	5b 81       	ldd	r21, Y+3	; 0x03
 386:	e4 9f       	mul	r30, r20
 388:	c0 01       	movw	r24, r0
 38a:	e5 9f       	mul	r30, r21
 38c:	90 0d       	add	r25, r0
 38e:	f4 9f       	mul	r31, r20
 390:	90 0d       	add	r25, r0
 392:	11 24       	eor	r1, r1
 394:	b9 01       	movw	r22, r18
 396:	0e 94 2a 03 	call	0x654	; 0x654 <__divmodhi4>
 39a:	d6 2e       	mov	r13, r22
 39c:	06 2f       	mov	r16, r22
 39e:	17 2f       	mov	r17, r23
	int finalB=RGB[2]*test/100;
 3a0:	6c 81       	ldd	r22, Y+4	; 0x04
 3a2:	7d 81       	ldd	r23, Y+5	; 0x05
 3a4:	e6 9f       	mul	r30, r22
 3a6:	c0 01       	movw	r24, r0
 3a8:	e7 9f       	mul	r30, r23
 3aa:	90 0d       	add	r25, r0
 3ac:	f6 9f       	mul	r31, r22
 3ae:	90 0d       	add	r25, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	b9 01       	movw	r22, r18
 3b4:	0e 94 2a 03 	call	0x654	; 0x654 <__divmodhi4>
 3b8:	86 2f       	mov	r24, r22
 3ba:	97 2f       	mov	r25, r23
	
	if(finalR>=255 || finalG>=255 || finalB>=255)
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	e2 16       	cp	r14, r18
 3c0:	f1 04       	cpc	r15, r1
 3c2:	cc f4       	brge	.+50     	; 0x3f6 <intensidad+0xcc>
 3c4:	0f 3f       	cpi	r16, 0xFF	; 255
 3c6:	11 05       	cpc	r17, r1
 3c8:	b4 f4       	brge	.+44     	; 0x3f6 <intensidad+0xcc>
 3ca:	8f 3f       	cpi	r24, 0xFF	; 255
 3cc:	91 05       	cpc	r25, r1
 3ce:	9c f4       	brge	.+38     	; 0x3f6 <intensidad+0xcc>
 3d0:	c7 2f       	mov	r28, r23
 3d2:	d6 2f       	mov	r29, r22
 3d4:	b7 01       	movw	r22, r14
		return 0;
	pwm('R',finalR);
 3d6:	82 e5       	ldi	r24, 0x52	; 82
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm>
	pwm('G',finalG);
 3de:	6d 2d       	mov	r22, r13
 3e0:	71 2f       	mov	r23, r17
 3e2:	87 e4       	ldi	r24, 0x47	; 71
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm>
	pwm('B',finalB);
 3ea:	6d 2f       	mov	r22, r29
 3ec:	7c 2f       	mov	r23, r28
 3ee:	82 e4       	ldi	r24, 0x42	; 66
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm>
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	08 95       	ret

00000406 <procesarEntrada>:

void procesarEntrada(int *condicion, int cont){
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	7c 01       	movw	r14, r24
 414:	eb 01       	movw	r28, r22

	int num = atoi((char *) BufferRX);
 416:	85 ed       	ldi	r24, 0xD5	; 213
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 67 03 	call	0x6ce	; 0x6ce <atoi>
 41e:	8c 01       	movw	r16, r24
	SerialPort_Send_String(BufferRX);
 420:	85 ed       	ldi	r24, 0xD5	; 213
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 05 03 	call	0x60a	; 0x60a <SerialPort_Send_String>
	SerialPort_Send_String("\n\r");
 428:	88 e2       	ldi	r24, 0x28	; 40
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 05 03 	call	0x60a	; 0x60a <SerialPort_Send_String>
	if (num>=0 && num <= 255){    //Verifica el rango valido
 430:	0f 3f       	cpi	r16, 0xFF	; 255
 432:	11 05       	cpc	r17, r1
 434:	09 f0       	breq	.+2      	; 0x438 <procesarEntrada+0x32>
 436:	60 f4       	brcc	.+24     	; 0x450 <procesarEntrada+0x4a>
		RGB[cont] = num;
 438:	cc 0f       	add	r28, r28
 43a:	dd 1f       	adc	r29, r29
 43c:	c0 50       	subi	r28, 0x00	; 0
 43e:	df 4f       	sbci	r29, 0xFF	; 255
 440:	19 83       	std	Y+1, r17	; 0x01
 442:	08 83       	st	Y, r16
		*condicion=true;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	f7 01       	movw	r30, r14
 44a:	91 83       	std	Z+1, r25	; 0x01
 44c:	80 83       	st	Z, r24
 44e:	07 c0       	rjmp	.+14     	; 0x45e <procesarEntrada+0x58>
	}
	else {						//En el caso de que no es ninguno de las opciones validas, devuelve 1
		SerialPort_Send_String("El numero debe estar entre 0 y 255\n\r");
 450:	86 e0       	ldi	r24, 0x06	; 6
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 05 03 	call	0x60a	; 0x60a <SerialPort_Send_String>
		*condicion=false;
 458:	f7 01       	movw	r30, r14
 45a:	11 82       	std	Z+1, r1	; 0x01
 45c:	10 82       	st	Z, r1
	}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	08 95       	ret

0000046c <actualizar_MEF>:
	pwm('R',0);
	pwm('G',0);
	pwm('B',0);
}

void actualizar_MEF(){
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
	static int condicion;
	switch (estado){
 470:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <estado>
 474:	8e 2f       	mov	r24, r30
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	87 30       	cpi	r24, 0x07	; 7
 47a:	91 05       	cpc	r25, r1
 47c:	08 f0       	brcs	.+2      	; 0x480 <actualizar_MEF+0x14>
 47e:	8e c0       	rjmp	.+284    	; 0x59c <actualizar_MEF+0x130>
 480:	fc 01       	movw	r30, r24
 482:	ec 5c       	subi	r30, 0xCC	; 204
 484:	ff 4f       	sbci	r31, 0xFF	; 255
 486:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__tablejump2__>
		case S0: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para R:\n\r"); estado=S1;
 48a:	8b e2       	ldi	r24, 0x2B	; 43
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 05 03 	call	0x60a	; 0x60a <SerialPort_Send_String>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 498:	81 c0       	rjmp	.+258    	; 0x59c <actualizar_MEF+0x130>
		case S1:
			if(ProcesarInstruccion){
 49a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 49e:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 4a2:	89 2b       	or	r24, r25
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <actualizar_MEF+0x3c>
 4a6:	7a c0       	rjmp	.+244    	; 0x59c <actualizar_MEF+0x130>
				ProcesarInstruccion=0;
 4a8:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 4ac:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,0);
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	8a ea       	ldi	r24, 0xAA	; 170
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 03 02 	call	0x406	; 0x406 <procesarEntrada>
				if(condicion){
 4bc:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <condicion.2183>
 4c0:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <condicion.2183+0x1>
 4c4:	89 2b       	or	r24, r25
 4c6:	21 f0       	breq	.+8      	; 0x4d0 <actualizar_MEF+0x64>
					estado=S2;
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 4ce:	66 c0       	rjmp	.+204    	; 0x59c <actualizar_MEF+0x130>
				}
				else{
					estado=S0;
 4d0:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
 4d4:	63 c0       	rjmp	.+198    	; 0x59c <actualizar_MEF+0x130>
				}
			}
		break;
		case S2: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para G:\n\r"); estado=S3;
 4d6:	84 e5       	ldi	r24, 0x54	; 84
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 05 03 	call	0x60a	; 0x60a <SerialPort_Send_String>
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 4e4:	5b c0       	rjmp	.+182    	; 0x59c <actualizar_MEF+0x130>
		case S3:
			if(ProcesarInstruccion){
 4e6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 4ea:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 4ee:	89 2b       	or	r24, r25
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <actualizar_MEF+0x88>
 4f2:	54 c0       	rjmp	.+168    	; 0x59c <actualizar_MEF+0x130>
				ProcesarInstruccion=0;
 4f4:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 4f8:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,1);
 4fc:	61 e0       	ldi	r22, 0x01	; 1
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	8a ea       	ldi	r24, 0xAA	; 170
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	0e 94 03 02 	call	0x406	; 0x406 <procesarEntrada>
				if(condicion){
 508:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <condicion.2183>
 50c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <condicion.2183+0x1>
 510:	89 2b       	or	r24, r25
 512:	21 f0       	breq	.+8      	; 0x51c <actualizar_MEF+0xb0>
					estado=S4;
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 51a:	40 c0       	rjmp	.+128    	; 0x59c <actualizar_MEF+0x130>
				}
				else{
					estado=S2;
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 522:	3c c0       	rjmp	.+120    	; 0x59c <actualizar_MEF+0x130>
				}
			}
		break;
		case S4: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para B:\n\r"); estado=S5;
 524:	8d e7       	ldi	r24, 0x7D	; 125
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	0e 94 05 03 	call	0x60a	; 0x60a <SerialPort_Send_String>
 52c:	85 e0       	ldi	r24, 0x05	; 5
 52e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 532:	34 c0       	rjmp	.+104    	; 0x59c <actualizar_MEF+0x130>
		case S5:
			if(ProcesarInstruccion){
 534:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 538:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 53c:	89 2b       	or	r24, r25
 53e:	71 f1       	breq	.+92     	; 0x59c <actualizar_MEF+0x130>
				ProcesarInstruccion=0;
 540:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 544:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,2);
 548:	62 e0       	ldi	r22, 0x02	; 2
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	8a ea       	ldi	r24, 0xAA	; 170
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 03 02 	call	0x406	; 0x406 <procesarEntrada>
				if(condicion){
 554:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <condicion.2183>
 558:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <condicion.2183+0x1>
 55c:	89 2b       	or	r24, r25
 55e:	21 f0       	breq	.+8      	; 0x568 <actualizar_MEF+0xfc>
					estado=S6;
 560:	86 e0       	ldi	r24, 0x06	; 6
 562:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 566:	1a c0       	rjmp	.+52     	; 0x59c <actualizar_MEF+0x130>
				}
				else{
					estado=S4;
 568:	84 e0       	ldi	r24, 0x04	; 4
 56a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 56e:	16 c0       	rjmp	.+44     	; 0x59c <actualizar_MEF+0x130>
				}
			}
		break;
		case S6: pwm('R',RGB[0]); pwm('G',RGB[1]); pwm('B',RGB[2]); estado=S0;
 570:	c0 e0       	ldi	r28, 0x00	; 0
 572:	d1 e0       	ldi	r29, 0x01	; 1
 574:	68 81       	ld	r22, Y
 576:	79 81       	ldd	r23, Y+1	; 0x01
 578:	82 e5       	ldi	r24, 0x52	; 82
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm>
 580:	6a 81       	ldd	r22, Y+2	; 0x02
 582:	7b 81       	ldd	r23, Y+3	; 0x03
 584:	87 e4       	ldi	r24, 0x47	; 71
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm>
 58c:	6c 81       	ldd	r22, Y+4	; 0x04
 58e:	7d 81       	ldd	r23, Y+5	; 0x05
 590:	82 e4       	ldi	r24, 0x42	; 66
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 2f 01 	call	0x25e	; 0x25e <pwm>
 598:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
		break;
	}
}
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <main>:
volatile int PWM_PB5=0;
volatile int pwmPB5=1;

int main(void)
{
	setupTimer();
 5a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <setupTimer>
	setupPines();
 5a6:	0e 94 66 00 	call	0xcc	; 0xcc <setupPines>
	setupSerialPort(103);
 5aa:	87 e6       	ldi	r24, 0x67	; 103
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 21 03 	call	0x642	; 0x642 <setupSerialPort>
	setupADC();
 5b2:	0e 94 6a 00 	call	0xd4	; 0xd4 <setupADC>
	sei();
 5b6:	78 94       	sei
    /* Replace with your application code */
	iniciar_MEF();
 5b8:	0e 94 80 01 	call	0x300	; 0x300 <iniciar_MEF>
	while (1) 
    {
		actualizar_MEF();
 5bc:	0e 94 36 02 	call	0x46c	; 0x46c <actualizar_MEF>
		intensidad();
 5c0:	0e 94 95 01 	call	0x32a	; 0x32a <intensidad>
 5c4:	fb cf       	rjmp	.-10     	; 0x5bc <main+0x1a>

000005c6 <SerialPort_Init>:
 5c6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 5ca:	96 e0       	ldi	r25, 0x06	; 6
 5cc:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5d4:	08 95       	ret

000005d6 <SerialPort_TX_Enable>:
 5d6:	e1 ec       	ldi	r30, 0xC1	; 193
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	88 60       	ori	r24, 0x08	; 8
 5de:	80 83       	st	Z, r24
 5e0:	08 95       	ret

000005e2 <SerialPort_RX_Enable>:
 5e2:	e1 ec       	ldi	r30, 0xC1	; 193
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	80 61       	ori	r24, 0x10	; 16
 5ea:	80 83       	st	Z, r24
 5ec:	08 95       	ret

000005ee <SerialPort_RX_Interrupt_Enable>:
 5ee:	e1 ec       	ldi	r30, 0xC1	; 193
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	80 68       	ori	r24, 0x80	; 128
 5f6:	80 83       	st	Z, r24
 5f8:	08 95       	ret

000005fa <SerialPort_Wait_For_TX_Buffer_Free>:
 5fa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5fe:	85 ff       	sbrs	r24, 5
 600:	fc cf       	rjmp	.-8      	; 0x5fa <SerialPort_Wait_For_TX_Buffer_Free>
 602:	08 95       	ret

00000604 <SerialPort_Send_Data>:
 604:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 608:	08 95       	ret

0000060a <SerialPort_Send_String>:
 60a:	ef 92       	push	r14
 60c:	ff 92       	push	r15
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	7c 01       	movw	r14, r24
 616:	c0 e0       	ldi	r28, 0x00	; 0
 618:	07 c0       	rjmp	.+14     	; 0x628 <SerialPort_Send_String+0x1e>
 61a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SerialPort_Wait_For_TX_Buffer_Free>
 61e:	f8 01       	movw	r30, r16
 620:	80 81       	ld	r24, Z
 622:	0e 94 02 03 	call	0x604	; 0x604 <SerialPort_Send_Data>
 626:	cf 5f       	subi	r28, 0xFF	; 255
 628:	87 01       	movw	r16, r14
 62a:	0c 0f       	add	r16, r28
 62c:	11 1d       	adc	r17, r1
 62e:	f8 01       	movw	r30, r16
 630:	80 81       	ld	r24, Z
 632:	81 11       	cpse	r24, r1
 634:	f2 cf       	rjmp	.-28     	; 0x61a <SerialPort_Send_String+0x10>
 636:	cf 91       	pop	r28
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	ff 90       	pop	r15
 63e:	ef 90       	pop	r14
 640:	08 95       	ret

00000642 <setupSerialPort>:
 642:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <SerialPort_Init>
 646:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SerialPort_TX_Enable>
 64a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SerialPort_RX_Enable>
 64e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SerialPort_RX_Interrupt_Enable>
 652:	08 95       	ret

00000654 <__divmodhi4>:
 654:	97 fb       	bst	r25, 7
 656:	07 2e       	mov	r0, r23
 658:	16 f4       	brtc	.+4      	; 0x65e <__divmodhi4+0xa>
 65a:	00 94       	com	r0
 65c:	07 d0       	rcall	.+14     	; 0x66c <__divmodhi4_neg1>
 65e:	77 fd       	sbrc	r23, 7
 660:	09 d0       	rcall	.+18     	; 0x674 <__divmodhi4_neg2>
 662:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__udivmodhi4>
 666:	07 fc       	sbrc	r0, 7
 668:	05 d0       	rcall	.+10     	; 0x674 <__divmodhi4_neg2>
 66a:	3e f4       	brtc	.+14     	; 0x67a <__divmodhi4_exit>

0000066c <__divmodhi4_neg1>:
 66c:	90 95       	com	r25
 66e:	81 95       	neg	r24
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	08 95       	ret

00000674 <__divmodhi4_neg2>:
 674:	70 95       	com	r23
 676:	61 95       	neg	r22
 678:	7f 4f       	sbci	r23, 0xFF	; 255

0000067a <__divmodhi4_exit>:
 67a:	08 95       	ret

0000067c <__tablejump2__>:
 67c:	ee 0f       	add	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	05 90       	lpm	r0, Z+
 682:	f4 91       	lpm	r31, Z
 684:	e0 2d       	mov	r30, r0
 686:	09 94       	ijmp

00000688 <__umulhisi3>:
 688:	a2 9f       	mul	r26, r18
 68a:	b0 01       	movw	r22, r0
 68c:	b3 9f       	mul	r27, r19
 68e:	c0 01       	movw	r24, r0
 690:	a3 9f       	mul	r26, r19
 692:	70 0d       	add	r23, r0
 694:	81 1d       	adc	r24, r1
 696:	11 24       	eor	r1, r1
 698:	91 1d       	adc	r25, r1
 69a:	b2 9f       	mul	r27, r18
 69c:	70 0d       	add	r23, r0
 69e:	81 1d       	adc	r24, r1
 6a0:	11 24       	eor	r1, r1
 6a2:	91 1d       	adc	r25, r1
 6a4:	08 95       	ret

000006a6 <__udivmodhi4>:
 6a6:	aa 1b       	sub	r26, r26
 6a8:	bb 1b       	sub	r27, r27
 6aa:	51 e1       	ldi	r21, 0x11	; 17
 6ac:	07 c0       	rjmp	.+14     	; 0x6bc <__udivmodhi4_ep>

000006ae <__udivmodhi4_loop>:
 6ae:	aa 1f       	adc	r26, r26
 6b0:	bb 1f       	adc	r27, r27
 6b2:	a6 17       	cp	r26, r22
 6b4:	b7 07       	cpc	r27, r23
 6b6:	10 f0       	brcs	.+4      	; 0x6bc <__udivmodhi4_ep>
 6b8:	a6 1b       	sub	r26, r22
 6ba:	b7 0b       	sbc	r27, r23

000006bc <__udivmodhi4_ep>:
 6bc:	88 1f       	adc	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	5a 95       	dec	r21
 6c2:	a9 f7       	brne	.-22     	; 0x6ae <__udivmodhi4_loop>
 6c4:	80 95       	com	r24
 6c6:	90 95       	com	r25
 6c8:	bc 01       	movw	r22, r24
 6ca:	cd 01       	movw	r24, r26
 6cc:	08 95       	ret

000006ce <atoi>:
 6ce:	fc 01       	movw	r30, r24
 6d0:	88 27       	eor	r24, r24
 6d2:	99 27       	eor	r25, r25
 6d4:	e8 94       	clt
 6d6:	21 91       	ld	r18, Z+
 6d8:	20 32       	cpi	r18, 0x20	; 32
 6da:	e9 f3       	breq	.-6      	; 0x6d6 <atoi+0x8>
 6dc:	29 30       	cpi	r18, 0x09	; 9
 6de:	10 f0       	brcs	.+4      	; 0x6e4 <atoi+0x16>
 6e0:	2e 30       	cpi	r18, 0x0E	; 14
 6e2:	c8 f3       	brcs	.-14     	; 0x6d6 <atoi+0x8>
 6e4:	2b 32       	cpi	r18, 0x2B	; 43
 6e6:	41 f0       	breq	.+16     	; 0x6f8 <atoi+0x2a>
 6e8:	2d 32       	cpi	r18, 0x2D	; 45
 6ea:	39 f4       	brne	.+14     	; 0x6fa <atoi+0x2c>
 6ec:	68 94       	set
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <atoi+0x2a>
 6f0:	0e 94 85 03 	call	0x70a	; 0x70a <__mulhi_const_10>
 6f4:	82 0f       	add	r24, r18
 6f6:	91 1d       	adc	r25, r1
 6f8:	21 91       	ld	r18, Z+
 6fa:	20 53       	subi	r18, 0x30	; 48
 6fc:	2a 30       	cpi	r18, 0x0A	; 10
 6fe:	c0 f3       	brcs	.-16     	; 0x6f0 <atoi+0x22>
 700:	1e f4       	brtc	.+6      	; 0x708 <atoi+0x3a>
 702:	90 95       	com	r25
 704:	81 95       	neg	r24
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	08 95       	ret

0000070a <__mulhi_const_10>:
 70a:	7a e0       	ldi	r23, 0x0A	; 10
 70c:	97 9f       	mul	r25, r23
 70e:	90 2d       	mov	r25, r0
 710:	87 9f       	mul	r24, r23
 712:	80 2d       	mov	r24, r0
 714:	91 0d       	add	r25, r1
 716:	11 24       	eor	r1, r1
 718:	08 95       	ret

0000071a <_exit>:
 71a:	f8 94       	cli

0000071c <__stop_program>:
 71c:	ff cf       	rjmp	.-2      	; 0x71c <__stop_program>
