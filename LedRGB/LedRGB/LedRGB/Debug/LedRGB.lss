
LedRGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00000646  000006da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  008001a6  008001a6  00000780  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001335  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f8  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5c  00000000  00000000  0000267d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  000030dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000781  00000000  00000000  00003454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077d  00000000  00000000  00003bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	10 02       	muls	r17, r16
  6a:	18 02       	muls	r17, r24
  6c:	36 02       	muls	r19, r22
  6e:	3e 02       	muls	r19, r30
  70:	5d 02       	muls	r21, r29
  72:	65 02       	muls	r22, r21
  74:	83 02       	muls	r24, r19

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e6 e4       	ldi	r30, 0x46	; 70
  8a:	f6 e0       	ldi	r31, 0x06	; 6
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a6 3a       	cpi	r26, 0xA6	; 166
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a6 ea       	ldi	r26, 0xA6	; 166
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 3f       	cpi	r26, 0xFA	; 250
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 9c 02 	call	0x538	; 0x538 <main>
  ac:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <setupTimer>:
extern char BufferRX[32];
extern volatile int OCR0_PB5;
extern volatile int PWM_PB5;
/*Configuración del timer 0*/
void setupTimer(){
	TCCR0B=0x02; // modo CTC
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	85 bd       	out	0x25, r24	; 37
	TCCR0A=(1<<CS02)|(1<<CS00); //configurar el registro del timer0 como temporizador con prescalador de 1024
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	84 bd       	out	0x24, r24	; 36
	OCR0A=255;					//el registro empieza con valor 255
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bd       	out	0x27, r24	; 39
	TIMSK0|= (1<<OCIE0A);	    //habilita la interrupcion por desbordamiento del timer0
  c0:	ee e6       	ldi	r30, 0x6E	; 110
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <setupPines>:
}

void setupPines(){
	DDRB |= (1<<1)|(1<<2)|(0<<5);
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	84 b9       	out	0x04, r24	; 4
  d2:	08 95       	ret

000000d4 <setupADC>:
}

void setupADC(){
	ADCSRA = 0;
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	ADCSRB = 0;
  da:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX |= (1 << REFS1); //set reference voltage
  de:	ac e7       	ldi	r26, 0x7C	; 124
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); //left align the ADC value- so we can read highest 8 bits from ADCH register only //
  e8:	8c 91       	ld	r24, X
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2); //prescalador ADC 128
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //enabble auto trigger
  f4:	80 81       	ld	r24, Z
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); //enable interrupts when measurement complete
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable ADC
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //start ADC measurements
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <__vector_14>:

/*
*Rutina de atención de interrupción Timer
*/
ISR(TIMER0_COMPA_vect)
{	
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
	static int flag=0;
	if(PWM_PB5==1){
 11c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <PWM_PB5>
 120:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <PWM_PB5+0x1>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	11 f5       	brne	.+68     	; 0x16c <__vector_14+0x5e>
		if(flag==0){
 128:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <flag.2150>
 12c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <flag.2150+0x1>
 130:	89 2b       	or	r24, r25
 132:	79 f4       	brne	.+30     	; 0x152 <__vector_14+0x44>
			flag=1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <flag.2150+0x1>
 13c:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <flag.2150>
			//PORTB &= ~(1<<5); // invertido
			PORTB |= (1<<5); // invertido
 140:	85 b1       	in	r24, 0x05	; 5
 142:	80 62       	ori	r24, 0x20	; 32
 144:	85 b9       	out	0x05, r24	; 5
			OCR0A=OCR0_PB5;
 146:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <OCR0_PB5>
 14a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <OCR0_PB5+0x1>
 14e:	87 bd       	out	0x27, r24	; 39
 150:	0d c0       	rjmp	.+26     	; 0x16c <__vector_14+0x5e>
		}
		else {
			flag=0;
 152:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <flag.2150+0x1>
 156:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <flag.2150>
			//PORTB |= (1<<5); // no invertido
			PORTB &= ~(1<<5); // invertido
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	85 b9       	out	0x05, r24	; 5
			OCR0A=(255-OCR0_PB5);
 160:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <OCR0_PB5>
 164:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <OCR0_PB5+0x1>
 168:	80 95       	com	r24
 16a:	87 bd       	out	0x27, r24	; 39
		}
	}
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_18>:

/*
*Rutina de atención de interrupción Terminal serie
*/
ISR(USART_RX_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	volatile char RX_Data = 0;
 19a:	19 82       	std	Y+1, r1	; 0x01
	static short int Index=0;
	
	RX_Data = UDR0;				//Obtengo la información del terminal
 19c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a0:	89 83       	std	Y+1, r24	; 0x01
	if(RX_Data != '\r'){		//si no es un salto de linea entonces almaceno caracter en el buffer
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	8d 30       	cpi	r24, 0x0D	; 13
 1a6:	89 f0       	breq	.+34     	; 0x1ca <__vector_18+0x50>
		BufferRX[Index++] = RX_Data;
 1a8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 1ac:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 1b0:	9c 01       	movw	r18, r24
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	30 93 a7 01 	sts	0x01A7, r19	; 0x8001a7 <__data_end+0x1>
 1ba:	20 93 a6 01 	sts	0x01A6, r18	; 0x8001a6 <__data_end>
 1be:	29 81       	ldd	r18, Y+1	; 0x01
 1c0:	fc 01       	movw	r30, r24
 1c2:	eb 52       	subi	r30, 0x2B	; 43
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	20 83       	st	Z, r18
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <__vector_18+0x72>
	}
	else{						//Si es un salto de linea entonces
		BufferRX[Index]='\0';	//Determino el final del string
 1ca:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <__data_end>
 1ce:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <__data_end+0x1>
 1d2:	eb 52       	subi	r30, 0x2B	; 43
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	10 82       	st	Z, r1
		ProcesarInstruccion = true; //Activo flag para atención de instrucción
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <ProcesarInstruccion+0x1>
 1e0:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <ProcesarInstruccion>
		Index=0;				//Vuelvo el indice al principio del vector
 1e4:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__data_end+0x1>
 1e8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
	}
}
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_21>:

ISR(ADC_vect) {//when new ADC value ready
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
	newData = ADCH;//get value from A0
 216:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <newData+0x1>
 220:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <newData>

 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <pwm>:
		actualizar_MEF();
		intensidad();
    }
}

void pwm(int pin,int num){
 232:	9c 01       	movw	r18, r24
	TCCR1B |= (1<<CS11);//prescalar /8
 234:	e1 e8       	ldi	r30, 0x81	; 129
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	90 81       	ld	r25, Z
 23a:	92 60       	ori	r25, 0x02	; 2
 23c:	90 83       	st	Z, r25
	switch(pin){
 23e:	27 34       	cpi	r18, 0x47	; 71
 240:	31 05       	cpc	r19, r1
 242:	89 f0       	breq	.+34     	; 0x266 <pwm+0x34>
 244:	22 35       	cpi	r18, 0x52	; 82
 246:	31 05       	cpc	r19, r1
 248:	21 f0       	breq	.+8      	; 0x252 <pwm+0x20>
 24a:	22 34       	cpi	r18, 0x42	; 66
 24c:	31 05       	cpc	r19, r1
 24e:	91 f5       	brne	.+100    	; 0x2b4 <pwm+0x82>
 250:	14 c0       	rjmp	.+40     	; 0x27a <pwm+0x48>
		case 'R':
			TCCR1A |= (1<<WGM12)|(1<<WGM10)|(1<<COM1A1)|(1<<COM1A0);//fast pwm, inverted
 252:	e0 e8       	ldi	r30, 0x80	; 128
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	89 6c       	ori	r24, 0xC9	; 201
 25a:	80 83       	st	Z, r24
			OCR1A=num;
 25c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 260:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 264:	08 95       	ret
		case 'G':
			TCCR1A |= (1<<WGM12)|(1<<WGM10)|(1<<COM1B1)|(1<<COM1B0);//fast pwm, inverted
 266:	e0 e8       	ldi	r30, 0x80	; 128
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	89 63       	ori	r24, 0x39	; 57
 26e:	80 83       	st	Z, r24
			OCR1B=num;
 270:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 274:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 278:	08 95       	ret
		case 'B':
			if(num < 8){
 27a:	68 30       	cpi	r22, 0x08	; 8
 27c:	71 05       	cpc	r23, r1
 27e:	24 f4       	brge	.+8      	; 0x288 <pwm+0x56>
				DDRB &= ~(1<<5);
 280:	84 b1       	in	r24, 0x04	; 4
 282:	8f 7d       	andi	r24, 0xDF	; 223
 284:	84 b9       	out	0x04, r24	; 4
 286:	08 95       	ret
			}
			else{
				if (num > 244)
 288:	65 3f       	cpi	r22, 0xF5	; 245
 28a:	71 05       	cpc	r23, r1
 28c:	34 f0       	brlt	.+12     	; 0x29a <pwm+0x68>
				{
					DDRB |= (1<<5);
 28e:	84 b1       	in	r24, 0x04	; 4
 290:	80 62       	ori	r24, 0x20	; 32
 292:	84 b9       	out	0x04, r24	; 4
					PORTB |= (1<<5);
 294:	85 b1       	in	r24, 0x05	; 5
 296:	80 62       	ori	r24, 0x20	; 32
 298:	85 b9       	out	0x05, r24	; 5
				}
				DDRB |= (1<<5);
 29a:	84 b1       	in	r24, 0x04	; 4
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	84 b9       	out	0x04, r24	; 4
				PWM_PB5=1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <PWM_PB5+0x1>
 2a8:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <PWM_PB5>
				OCR0_PB5=num;
 2ac:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <OCR0_PB5+0x1>
 2b0:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <OCR0_PB5>
 2b4:	08 95       	ret

000002b6 <iniciar_MEF>:
		break;
	}
}

void iniciar_MEF(){
	estado=S0;
 2b6:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
	//PWM manual entre 7 y 248 anda joya (simulador)
	pwm('R',0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	82 e5       	ldi	r24, 0x52	; 82
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	pwm('G',0);
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	87 e4       	ldi	r24, 0x47	; 71
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	pwm('B',0);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	82 e4       	ldi	r24, 0x42	; 66
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 2de:	08 95       	ret

000002e0 <intensidad>:
		break;
	}
}

void intensidad(){
	if(RGB[0]>0 && newData+RGB[0]>=0 && newData+RGB[0]<=255){
 2e0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <RGB>
 2e4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <RGB+0x1>
 2e8:	16 16       	cp	r1, r22
 2ea:	17 06       	cpc	r1, r23
 2ec:	c4 f4       	brge	.+48     	; 0x31e <intensidad+0x3e>
 2ee:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 2f2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 2f6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 2fa:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 2fe:	86 0f       	add	r24, r22
 300:	97 1f       	adc	r25, r23
 302:	8f 3f       	cpi	r24, 0xFF	; 255
 304:	91 05       	cpc	r25, r1
 306:	09 f0       	breq	.+2      	; 0x30a <intensidad+0x2a>
 308:	50 f4       	brcc	.+20     	; 0x31e <intensidad+0x3e>
		pwm('R',RGB[0]+newData);
 30a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 30e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 312:	68 0f       	add	r22, r24
 314:	79 1f       	adc	r23, r25
 316:	82 e5       	ldi	r24, 0x52	; 82
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	}
	if(RGB[1]>0 && newData+RGB[1]>=0 && newData+RGB[1]<=255){
 31e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <RGB+0x2>
 322:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <RGB+0x3>
 326:	16 16       	cp	r1, r22
 328:	17 06       	cpc	r1, r23
 32a:	c4 f4       	brge	.+48     	; 0x35c <intensidad+0x7c>
 32c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 330:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 334:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 338:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 33c:	86 0f       	add	r24, r22
 33e:	97 1f       	adc	r25, r23
 340:	8f 3f       	cpi	r24, 0xFF	; 255
 342:	91 05       	cpc	r25, r1
 344:	09 f0       	breq	.+2      	; 0x348 <intensidad+0x68>
 346:	50 f4       	brcc	.+20     	; 0x35c <intensidad+0x7c>
		pwm('G',RGB[1]+newData);
 348:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 34c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 350:	68 0f       	add	r22, r24
 352:	79 1f       	adc	r23, r25
 354:	87 e4       	ldi	r24, 0x47	; 71
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	}
	if(RGB[2]>0 && newData+RGB[2]>=0 && newData+RGB[2]<=255){
 35c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <RGB+0x4>
 360:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <RGB+0x5>
 364:	16 16       	cp	r1, r22
 366:	17 06       	cpc	r1, r23
 368:	c4 f4       	brge	.+48     	; 0x39a <intensidad+0xba>
 36a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 36e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 372:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 376:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 37a:	86 0f       	add	r24, r22
 37c:	97 1f       	adc	r25, r23
 37e:	8f 3f       	cpi	r24, 0xFF	; 255
 380:	91 05       	cpc	r25, r1
 382:	09 f0       	breq	.+2      	; 0x386 <intensidad+0xa6>
 384:	50 f4       	brcc	.+20     	; 0x39a <intensidad+0xba>
		pwm('B',RGB[2]+newData);
 386:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 38a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 38e:	68 0f       	add	r22, r24
 390:	79 1f       	adc	r23, r25
 392:	82 e4       	ldi	r24, 0x42	; 66
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 39a:	08 95       	ret

0000039c <procesarEntrada>:
	}
}

void procesarEntrada(int *condicion, int cont){
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	7c 01       	movw	r14, r24
 3aa:	eb 01       	movw	r28, r22

	int num = atoi((char *) BufferRX);
 3ac:	85 ed       	ldi	r24, 0xD5	; 213
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <atoi>
 3b4:	8c 01       	movw	r16, r24
	SerialPort_Send_String(BufferRX);
 3b6:	85 ed       	ldi	r24, 0xD5	; 213
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SerialPort_Send_String>
	SerialPort_Send_String("\n\r");
 3be:	88 e2       	ldi	r24, 0x28	; 40
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SerialPort_Send_String>
	if (num>=0 && num <= 255){    //Verifica el rango valido
 3c6:	0f 3f       	cpi	r16, 0xFF	; 255
 3c8:	11 05       	cpc	r17, r1
 3ca:	09 f0       	breq	.+2      	; 0x3ce <procesarEntrada+0x32>
 3cc:	60 f4       	brcc	.+24     	; 0x3e6 <procesarEntrada+0x4a>
		RGB[cont] = num;
 3ce:	cc 0f       	add	r28, r28
 3d0:	dd 1f       	adc	r29, r29
 3d2:	c0 50       	subi	r28, 0x00	; 0
 3d4:	df 4f       	sbci	r29, 0xFF	; 255
 3d6:	19 83       	std	Y+1, r17	; 0x01
 3d8:	08 83       	st	Y, r16
		*condicion=true;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	f7 01       	movw	r30, r14
 3e0:	91 83       	std	Z+1, r25	; 0x01
 3e2:	80 83       	st	Z, r24
 3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <procesarEntrada+0x58>
	}
	else {						//En el caso de que no es ninguno de las opciones validas, devuelve 1
		SerialPort_Send_String("El numero debe estar entre 0 y 255\n\r");
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SerialPort_Send_String>
		*condicion=false;
 3ee:	f7 01       	movw	r30, r14
 3f0:	11 82       	std	Z+1, r1	; 0x01
 3f2:	10 82       	st	Z, r1
	}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	08 95       	ret

00000402 <actualizar_MEF>:
	pwm('R',0);
	pwm('G',0);
	pwm('B',0);
}

void actualizar_MEF(){
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
	static int condicion;
	switch (estado){
 406:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <estado>
 40a:	8e 2f       	mov	r24, r30
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	87 30       	cpi	r24, 0x07	; 7
 410:	91 05       	cpc	r25, r1
 412:	08 f0       	brcs	.+2      	; 0x416 <actualizar_MEF+0x14>
 414:	8e c0       	rjmp	.+284    	; 0x532 <actualizar_MEF+0x130>
 416:	fc 01       	movw	r30, r24
 418:	ec 5c       	subi	r30, 0xCC	; 204
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__tablejump2__>
		case S0: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para R:\n\r"); estado=S1;
 420:	8b e2       	ldi	r24, 0x2B	; 43
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SerialPort_Send_String>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 42e:	81 c0       	rjmp	.+258    	; 0x532 <actualizar_MEF+0x130>
		case S1:
			if(ProcesarInstruccion){
 430:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 434:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 438:	89 2b       	or	r24, r25
 43a:	09 f4       	brne	.+2      	; 0x43e <actualizar_MEF+0x3c>
 43c:	7a c0       	rjmp	.+244    	; 0x532 <actualizar_MEF+0x130>
				ProcesarInstruccion=0;
 43e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 442:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,0);
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	8a ea       	ldi	r24, 0xAA	; 170
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 ce 01 	call	0x39c	; 0x39c <procesarEntrada>
				if(condicion){
 452:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <condicion.2183>
 456:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <condicion.2183+0x1>
 45a:	89 2b       	or	r24, r25
 45c:	21 f0       	breq	.+8      	; 0x466 <actualizar_MEF+0x64>
					estado=S2;
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 464:	66 c0       	rjmp	.+204    	; 0x532 <actualizar_MEF+0x130>
				}
				else{
					estado=S0;
 466:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
 46a:	63 c0       	rjmp	.+198    	; 0x532 <actualizar_MEF+0x130>
				}
			}
		break;
		case S2: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para G:\n\r"); estado=S3;
 46c:	84 e5       	ldi	r24, 0x54	; 84
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SerialPort_Send_String>
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 47a:	5b c0       	rjmp	.+182    	; 0x532 <actualizar_MEF+0x130>
		case S3:
			if(ProcesarInstruccion){
 47c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 480:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 484:	89 2b       	or	r24, r25
 486:	09 f4       	brne	.+2      	; 0x48a <actualizar_MEF+0x88>
 488:	54 c0       	rjmp	.+168    	; 0x532 <actualizar_MEF+0x130>
				ProcesarInstruccion=0;
 48a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 48e:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,1);
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	8a ea       	ldi	r24, 0xAA	; 170
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 ce 01 	call	0x39c	; 0x39c <procesarEntrada>
				if(condicion){
 49e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <condicion.2183>
 4a2:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <condicion.2183+0x1>
 4a6:	89 2b       	or	r24, r25
 4a8:	21 f0       	breq	.+8      	; 0x4b2 <actualizar_MEF+0xb0>
					estado=S4;
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 4b0:	40 c0       	rjmp	.+128    	; 0x532 <actualizar_MEF+0x130>
				}
				else{
					estado=S2;
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 4b8:	3c c0       	rjmp	.+120    	; 0x532 <actualizar_MEF+0x130>
				}
			}
		break;
		case S4: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para B:\n\r"); estado=S5;
 4ba:	8d e7       	ldi	r24, 0x7D	; 125
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SerialPort_Send_String>
 4c2:	85 e0       	ldi	r24, 0x05	; 5
 4c4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 4c8:	34 c0       	rjmp	.+104    	; 0x532 <actualizar_MEF+0x130>
		case S5:
			if(ProcesarInstruccion){
 4ca:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 4ce:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 4d2:	89 2b       	or	r24, r25
 4d4:	71 f1       	breq	.+92     	; 0x532 <actualizar_MEF+0x130>
				ProcesarInstruccion=0;
 4d6:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 4da:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,2);
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	8a ea       	ldi	r24, 0xAA	; 170
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 ce 01 	call	0x39c	; 0x39c <procesarEntrada>
				if(condicion){
 4ea:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <condicion.2183>
 4ee:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <condicion.2183+0x1>
 4f2:	89 2b       	or	r24, r25
 4f4:	21 f0       	breq	.+8      	; 0x4fe <actualizar_MEF+0xfc>
					estado=S6;
 4f6:	86 e0       	ldi	r24, 0x06	; 6
 4f8:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 4fc:	1a c0       	rjmp	.+52     	; 0x532 <actualizar_MEF+0x130>
				}
				else{
					estado=S4;
 4fe:	84 e0       	ldi	r24, 0x04	; 4
 500:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 504:	16 c0       	rjmp	.+44     	; 0x532 <actualizar_MEF+0x130>
				}
			}
		break;
		case S6: pwm('R',RGB[0]); pwm('G',RGB[1]); pwm('B',RGB[2]); estado=S0;
 506:	c0 e0       	ldi	r28, 0x00	; 0
 508:	d1 e0       	ldi	r29, 0x01	; 1
 50a:	68 81       	ld	r22, Y
 50c:	79 81       	ldd	r23, Y+1	; 0x01
 50e:	82 e5       	ldi	r24, 0x52	; 82
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 516:	6a 81       	ldd	r22, Y+2	; 0x02
 518:	7b 81       	ldd	r23, Y+3	; 0x03
 51a:	87 e4       	ldi	r24, 0x47	; 71
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 522:	6c 81       	ldd	r22, Y+4	; 0x04
 524:	7d 81       	ldd	r23, Y+5	; 0x05
 526:	82 e4       	ldi	r24, 0x42	; 66
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 52e:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
		break;
	}
}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <main>:
volatile int PWM_PB5=0;
volatile int pwmPB5=1;

int main(void)
{
	setupTimer();
 538:	0e 94 5a 00 	call	0xb4	; 0xb4 <setupTimer>
	setupPines();
 53c:	0e 94 66 00 	call	0xcc	; 0xcc <setupPines>
	setupSerialPort(103);
 540:	87 e6       	ldi	r24, 0x67	; 103
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <setupSerialPort>
	setupADC();
 548:	0e 94 6a 00 	call	0xd4	; 0xd4 <setupADC>
	sei();
 54c:	78 94       	sei
    /* Replace with your application code */
	iniciar_MEF();
 54e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <iniciar_MEF>
	while (1) 
    {
		actualizar_MEF();
 552:	0e 94 01 02 	call	0x402	; 0x402 <actualizar_MEF>
		intensidad();
 556:	0e 94 70 01 	call	0x2e0	; 0x2e0 <intensidad>
 55a:	fb cf       	rjmp	.-10     	; 0x552 <main+0x1a>

0000055c <SerialPort_Init>:
 55c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 560:	96 e0       	ldi	r25, 0x06	; 6
 562:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 566:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 56a:	08 95       	ret

0000056c <SerialPort_TX_Enable>:
 56c:	e1 ec       	ldi	r30, 0xC1	; 193
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	88 60       	ori	r24, 0x08	; 8
 574:	80 83       	st	Z, r24
 576:	08 95       	ret

00000578 <SerialPort_RX_Enable>:
 578:	e1 ec       	ldi	r30, 0xC1	; 193
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	80 61       	ori	r24, 0x10	; 16
 580:	80 83       	st	Z, r24
 582:	08 95       	ret

00000584 <SerialPort_RX_Interrupt_Enable>:
 584:	e1 ec       	ldi	r30, 0xC1	; 193
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	80 68       	ori	r24, 0x80	; 128
 58c:	80 83       	st	Z, r24
 58e:	08 95       	ret

00000590 <SerialPort_Wait_For_TX_Buffer_Free>:
 590:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 594:	85 ff       	sbrs	r24, 5
 596:	fc cf       	rjmp	.-8      	; 0x590 <SerialPort_Wait_For_TX_Buffer_Free>
 598:	08 95       	ret

0000059a <SerialPort_Send_Data>:
 59a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 59e:	08 95       	ret

000005a0 <SerialPort_Send_String>:
 5a0:	ef 92       	push	r14
 5a2:	ff 92       	push	r15
 5a4:	0f 93       	push	r16
 5a6:	1f 93       	push	r17
 5a8:	cf 93       	push	r28
 5aa:	7c 01       	movw	r14, r24
 5ac:	c0 e0       	ldi	r28, 0x00	; 0
 5ae:	07 c0       	rjmp	.+14     	; 0x5be <SerialPort_Send_String+0x1e>
 5b0:	0e 94 c8 02 	call	0x590	; 0x590 <SerialPort_Wait_For_TX_Buffer_Free>
 5b4:	f8 01       	movw	r30, r16
 5b6:	80 81       	ld	r24, Z
 5b8:	0e 94 cd 02 	call	0x59a	; 0x59a <SerialPort_Send_Data>
 5bc:	cf 5f       	subi	r28, 0xFF	; 255
 5be:	87 01       	movw	r16, r14
 5c0:	0c 0f       	add	r16, r28
 5c2:	11 1d       	adc	r17, r1
 5c4:	f8 01       	movw	r30, r16
 5c6:	80 81       	ld	r24, Z
 5c8:	81 11       	cpse	r24, r1
 5ca:	f2 cf       	rjmp	.-28     	; 0x5b0 <SerialPort_Send_String+0x10>
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	ff 90       	pop	r15
 5d4:	ef 90       	pop	r14
 5d6:	08 95       	ret

000005d8 <setupSerialPort>:
 5d8:	0e 94 ae 02 	call	0x55c	; 0x55c <SerialPort_Init>
 5dc:	0e 94 b6 02 	call	0x56c	; 0x56c <SerialPort_TX_Enable>
 5e0:	0e 94 bc 02 	call	0x578	; 0x578 <SerialPort_RX_Enable>
 5e4:	0e 94 c2 02 	call	0x584	; 0x584 <SerialPort_RX_Interrupt_Enable>
 5e8:	08 95       	ret

000005ea <__tablejump2__>:
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	05 90       	lpm	r0, Z+
 5f0:	f4 91       	lpm	r31, Z
 5f2:	e0 2d       	mov	r30, r0
 5f4:	09 94       	ijmp

000005f6 <atoi>:
 5f6:	fc 01       	movw	r30, r24
 5f8:	88 27       	eor	r24, r24
 5fa:	99 27       	eor	r25, r25
 5fc:	e8 94       	clt
 5fe:	21 91       	ld	r18, Z+
 600:	20 32       	cpi	r18, 0x20	; 32
 602:	e9 f3       	breq	.-6      	; 0x5fe <atoi+0x8>
 604:	29 30       	cpi	r18, 0x09	; 9
 606:	10 f0       	brcs	.+4      	; 0x60c <atoi+0x16>
 608:	2e 30       	cpi	r18, 0x0E	; 14
 60a:	c8 f3       	brcs	.-14     	; 0x5fe <atoi+0x8>
 60c:	2b 32       	cpi	r18, 0x2B	; 43
 60e:	41 f0       	breq	.+16     	; 0x620 <atoi+0x2a>
 610:	2d 32       	cpi	r18, 0x2D	; 45
 612:	39 f4       	brne	.+14     	; 0x622 <atoi+0x2c>
 614:	68 94       	set
 616:	04 c0       	rjmp	.+8      	; 0x620 <atoi+0x2a>
 618:	0e 94 19 03 	call	0x632	; 0x632 <__mulhi_const_10>
 61c:	82 0f       	add	r24, r18
 61e:	91 1d       	adc	r25, r1
 620:	21 91       	ld	r18, Z+
 622:	20 53       	subi	r18, 0x30	; 48
 624:	2a 30       	cpi	r18, 0x0A	; 10
 626:	c0 f3       	brcs	.-16     	; 0x618 <atoi+0x22>
 628:	1e f4       	brtc	.+6      	; 0x630 <atoi+0x3a>
 62a:	90 95       	com	r25
 62c:	81 95       	neg	r24
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	08 95       	ret

00000632 <__mulhi_const_10>:
 632:	7a e0       	ldi	r23, 0x0A	; 10
 634:	97 9f       	mul	r25, r23
 636:	90 2d       	mov	r25, r0
 638:	87 9f       	mul	r24, r23
 63a:	80 2d       	mov	r24, r0
 63c:	91 0d       	add	r25, r1
 63e:	11 24       	eor	r1, r1
 640:	08 95       	ret

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
