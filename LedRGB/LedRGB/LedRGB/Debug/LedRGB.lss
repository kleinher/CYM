
LedRGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00000624  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  008001a0  008001a0  00000758  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001320  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f8  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a39  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  0000307c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000763  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077d  00000000  00000000  00003b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000042d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	ff 01       	movw	r30, r30
  6a:	07 02       	muls	r16, r23
  6c:	25 02       	muls	r18, r21
  6e:	2d 02       	muls	r18, r29
  70:	4c 02       	muls	r20, r28
  72:	54 02       	muls	r21, r20
  74:	72 02       	muls	r23, r18

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e4 e2       	ldi	r30, 0x24	; 36
  8a:	f6 e0       	ldi	r31, 0x06	; 6
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 3a       	cpi	r26, 0xA0	; 160
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 ea       	ldi	r26, 0xA0	; 160
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 3f       	cpi	r26, 0xFA	; 250
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 8b 02 	call	0x516	; 0x516 <main>
  ac:	0c 94 10 03 	jmp	0x620	; 0x620 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <setupTimer>:
extern volatile int OCR0_PB5;
extern volatile int PWM_PB5;
extern volatile int newData;
/*Configuración del timer 0*/
void setupTimer(){
	TCCR0B=0x02; // modo CTC
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	85 bd       	out	0x25, r24	; 37
	TCCR0A=(1<<CS02)|(1<<CS00); //configurar el registro del timer0 como temporizador con prescalador de 1024
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	84 bd       	out	0x24, r24	; 36
	OCR0A=255;					//el registro empieza con valor 255
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bd       	out	0x27, r24	; 39
	TIMSK0|= (1<<OCIE0A);	    //habilita la interrupcion por desbordamiento del timer0
  c0:	ee e6       	ldi	r30, 0x6E	; 110
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <setupPines>:
}

void setupPines(){
	DDRB |= (1<<1)|(1<<2)|(1<<5);
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	86 62       	ori	r24, 0x26	; 38
  d0:	84 b9       	out	0x04, r24	; 4
  d2:	08 95       	ret

000000d4 <setupADC>:
}

void setupADC(){
	ADCSRA = 0;
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	ADCSRB = 0;
  da:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX |= (1 << REFS1); //set reference voltage
  de:	ac e7       	ldi	r26, 0x7C	; 124
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); //left align the ADC value- so we can read highest 8 bits from ADCH register only //
  e8:	8c 91       	ld	r24, X
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADPS2); //prescalador ADC 8
  ee:	80 81       	ld	r24, Z
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //enabble auto trigger
  f4:	80 81       	ld	r24, Z
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); //enable interrupts when measurement complete
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable ADC
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //start ADC measurements
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <__vector_14>:

/*
*Rutina de atención de interrupción Timer
*/
ISR(TIMER0_COMPA_vect)
{	
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
	static int flag=0;
	if(PWM_PB5==1){
 11c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <PWM_PB5>
 120:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <PWM_PB5+0x1>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	11 f5       	brne	.+68     	; 0x16c <__vector_14+0x5e>
		if(flag==0){
 128:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <flag.2151>
 12c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <flag.2151+0x1>
 130:	89 2b       	or	r24, r25
 132:	79 f4       	brne	.+30     	; 0x152 <__vector_14+0x44>
			flag=1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <flag.2151+0x1>
 13c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <flag.2151>
			//PORTB &= ~(1<<5); // invertido
			PORTB |= (1<<5); // invertido
 140:	85 b1       	in	r24, 0x05	; 5
 142:	80 62       	ori	r24, 0x20	; 32
 144:	85 b9       	out	0x05, r24	; 5
			OCR0A=OCR0_PB5;
 146:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <OCR0_PB5>
 14a:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <OCR0_PB5+0x1>
 14e:	87 bd       	out	0x27, r24	; 39
 150:	0d c0       	rjmp	.+26     	; 0x16c <__vector_14+0x5e>
		}
		else {
			flag=0;
 152:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <flag.2151+0x1>
 156:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <flag.2151>
			//PORTB |= (1<<5); // no invertido
			PORTB &= ~(1<<5); // invertido
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	85 b9       	out	0x05, r24	; 5
			OCR0A=(255-OCR0_PB5);
 160:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <OCR0_PB5>
 164:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <OCR0_PB5+0x1>
 168:	80 95       	com	r24
 16a:	87 bd       	out	0x27, r24	; 39
		}
	}
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_18>:

/*
*Rutina de atención de interrupción Terminal serie
*/
ISR(USART_RX_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	volatile char RX_Data = 0;
 19a:	19 82       	std	Y+1, r1	; 0x01
	static short int Index=0;
	
	RX_Data = UDR0;				//Obtengo la información del terminal
 19c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a0:	89 83       	std	Y+1, r24	; 0x01
	if(RX_Data != '\r'){		//si no es un salto de linea entonces almaceno caracter en el buffer
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	8d 30       	cpi	r24, 0x0D	; 13
 1a6:	89 f0       	breq	.+34     	; 0x1ca <__vector_18+0x50>
		BufferRX[Index++] = RX_Data;
 1a8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 1ac:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 1b0:	9c 01       	movw	r18, r24
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <__data_end+0x1>
 1ba:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__data_end>
 1be:	29 81       	ldd	r18, Y+1	; 0x01
 1c0:	fc 01       	movw	r30, r24
 1c2:	eb 52       	subi	r30, 0x2B	; 43
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	20 83       	st	Z, r18
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <__vector_18+0x72>
	}
	else{						//Si es un salto de linea entonces
		BufferRX[Index]='\0';	//Determino el final del string
 1ca:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__data_end>
 1ce:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <__data_end+0x1>
 1d2:	eb 52       	subi	r30, 0x2B	; 43
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	10 82       	st	Z, r1
		ProcesarInstruccion = true; //Activo flag para atención de instrucción
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <ProcesarInstruccion+0x1>
 1e0:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <ProcesarInstruccion>
		Index=0;				//Vuelvo el indice al principio del vector
 1e4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
 1e8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
	}
}
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_21>:

ISR(ADC_vect) {//when new ADC value ready
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
	newData = ADCH;//get value from A0
 216:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <newData+0x1>
 220:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <newData>
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <pwm>:
		actualizar_MEF();
		intensidad();
    }
}

void pwm(int pin,int num){
 232:	9c 01       	movw	r18, r24
	TCCR1B |= (1<<CS11);//prescalar /8
 234:	e1 e8       	ldi	r30, 0x81	; 129
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	90 81       	ld	r25, Z
 23a:	92 60       	ori	r25, 0x02	; 2
 23c:	90 83       	st	Z, r25
	switch(pin){
 23e:	27 34       	cpi	r18, 0x47	; 71
 240:	31 05       	cpc	r19, r1
 242:	89 f0       	breq	.+34     	; 0x266 <pwm+0x34>
 244:	22 35       	cpi	r18, 0x52	; 82
 246:	31 05       	cpc	r19, r1
 248:	21 f0       	breq	.+8      	; 0x252 <pwm+0x20>
 24a:	22 34       	cpi	r18, 0x42	; 66
 24c:	31 05       	cpc	r19, r1
 24e:	f9 f4       	brne	.+62     	; 0x28e <pwm+0x5c>
 250:	14 c0       	rjmp	.+40     	; 0x27a <pwm+0x48>
		case 'R':
			TCCR1A |= (1<<WGM12)|(1<<WGM10)|(1<<COM1A1)|(1<<COM1A0);//fast pwm, inverted
 252:	e0 e8       	ldi	r30, 0x80	; 128
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	89 6c       	ori	r24, 0xC9	; 201
 25a:	80 83       	st	Z, r24
			OCR1A=num;
 25c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 260:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 264:	08 95       	ret
		case 'G':
			TCCR1A |= (1<<WGM12)|(1<<WGM10)|(1<<COM1B1)|(1<<COM1B0);//fast pwm, inverted
 266:	e0 e8       	ldi	r30, 0x80	; 128
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	89 63       	ori	r24, 0x39	; 57
 26e:	80 83       	st	Z, r24
			OCR1B=num;
 270:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 274:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 278:	08 95       	ret
		case 'B':
			PWM_PB5=1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <PWM_PB5+0x1>
 282:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <PWM_PB5>
			OCR0_PB5=num;
 286:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <OCR0_PB5+0x1>
 28a:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <OCR0_PB5>
 28e:	08 95       	ret

00000290 <iniciar_MEF>:
		break;
	}
}

void iniciar_MEF(){
	estado=S0;
 290:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
	//PWM manual entre 7 y 248 anda joya (simulador)
	pwm('R',0);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	82 e5       	ldi	r24, 0x52	; 82
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	pwm('G',0);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	87 e4       	ldi	r24, 0x47	; 71
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	pwm('B',8);
 2ac:	68 e0       	ldi	r22, 0x08	; 8
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	82 e4       	ldi	r24, 0x42	; 66
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 2b8:	08 95       	ret

000002ba <intensidad>:
		break;
	}
}

void intensidad(){
	if(newData+RGB[0]>=0 && newData+RGB[0]<=255){
 2ba:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <RGB>
 2be:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <RGB+0x1>
 2c2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 2c6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 2ca:	86 0f       	add	r24, r22
 2cc:	97 1f       	adc	r25, r23
 2ce:	99 23       	and	r25, r25
 2d0:	a4 f0       	brlt	.+40     	; 0x2fa <intensidad+0x40>
 2d2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 2d6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 2da:	86 0f       	add	r24, r22
 2dc:	97 1f       	adc	r25, r23
 2de:	8f 3f       	cpi	r24, 0xFF	; 255
 2e0:	91 05       	cpc	r25, r1
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <intensidad+0x2c>
 2e4:	54 f4       	brge	.+20     	; 0x2fa <intensidad+0x40>
		pwm('R',RGB[0]+newData);
 2e6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 2ea:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 2ee:	68 0f       	add	r22, r24
 2f0:	79 1f       	adc	r23, r25
 2f2:	82 e5       	ldi	r24, 0x52	; 82
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	}
	if(newData+RGB[1]>=0 && newData+RGB[1]<=255){
 2fa:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <RGB+0x2>
 2fe:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <RGB+0x3>
 302:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 306:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 30a:	86 0f       	add	r24, r22
 30c:	97 1f       	adc	r25, r23
 30e:	99 23       	and	r25, r25
 310:	a4 f0       	brlt	.+40     	; 0x33a <intensidad+0x80>
 312:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 316:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 31a:	86 0f       	add	r24, r22
 31c:	97 1f       	adc	r25, r23
 31e:	8f 3f       	cpi	r24, 0xFF	; 255
 320:	91 05       	cpc	r25, r1
 322:	09 f0       	breq	.+2      	; 0x326 <intensidad+0x6c>
 324:	54 f4       	brge	.+20     	; 0x33a <intensidad+0x80>
		pwm('G',RGB[1]+newData);
 326:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 32a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 32e:	68 0f       	add	r22, r24
 330:	79 1f       	adc	r23, r25
 332:	87 e4       	ldi	r24, 0x47	; 71
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	}
	if(newData+RGB[2]>=10 && newData+RGB[2]<=244){
 33a:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <RGB+0x4>
 33e:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <RGB+0x5>
 342:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 346:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 34a:	86 0f       	add	r24, r22
 34c:	97 1f       	adc	r25, r23
 34e:	0a 97       	sbiw	r24, 0x0a	; 10
 350:	9c f0       	brlt	.+38     	; 0x378 <intensidad+0xbe>
 352:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 356:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 35a:	86 0f       	add	r24, r22
 35c:	97 1f       	adc	r25, r23
 35e:	85 3f       	cpi	r24, 0xF5	; 245
 360:	91 05       	cpc	r25, r1
 362:	54 f4       	brge	.+20     	; 0x378 <intensidad+0xbe>
		pwm('B',RGB[2]+newData);
 364:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 368:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 36c:	68 0f       	add	r22, r24
 36e:	79 1f       	adc	r23, r25
 370:	82 e4       	ldi	r24, 0x42	; 66
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 378:	08 95       	ret

0000037a <procesarEntrada>:
	}
}

void procesarEntrada(int *condicion, int cont){
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	7c 01       	movw	r14, r24
 388:	eb 01       	movw	r28, r22

	int num = atoi((char *) BufferRX);
 38a:	85 ed       	ldi	r24, 0xD5	; 213
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <atoi>
 392:	8c 01       	movw	r16, r24
	SerialPort_Send_String(BufferRX);
 394:	85 ed       	ldi	r24, 0xD5	; 213
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 bf 02 	call	0x57e	; 0x57e <SerialPort_Send_String>
	SerialPort_Send_String("\n\r");
 39c:	82 e2       	ldi	r24, 0x22	; 34
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 bf 02 	call	0x57e	; 0x57e <SerialPort_Send_String>
	if (num>=0 && num <= 255){    //Verifica el rango valido
 3a4:	0f 3f       	cpi	r16, 0xFF	; 255
 3a6:	11 05       	cpc	r17, r1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <procesarEntrada+0x32>
 3aa:	60 f4       	brcc	.+24     	; 0x3c4 <procesarEntrada+0x4a>
		RGB[cont] = num;
 3ac:	cc 0f       	add	r28, r28
 3ae:	dd 1f       	adc	r29, r29
 3b0:	c6 55       	subi	r28, 0x56	; 86
 3b2:	de 4f       	sbci	r29, 0xFE	; 254
 3b4:	19 83       	std	Y+1, r17	; 0x01
 3b6:	08 83       	st	Y, r16
		*condicion=true;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	f7 01       	movw	r30, r14
 3be:	91 83       	std	Z+1, r25	; 0x01
 3c0:	80 83       	st	Z, r24
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <procesarEntrada+0x58>
	}
	else {						//En el caso de que no es ninguno de las opciones validas, devuelve 1
		SerialPort_Send_String("El numero debe estar entre 0 y 255\n\r");
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 bf 02 	call	0x57e	; 0x57e <SerialPort_Send_String>
		*condicion=false;
 3cc:	f7 01       	movw	r30, r14
 3ce:	11 82       	std	Z+1, r1	; 0x01
 3d0:	10 82       	st	Z, r1
	}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	08 95       	ret

000003e0 <actualizar_MEF>:
	pwm('R',0);
	pwm('G',0);
	pwm('B',8);
}

void actualizar_MEF(){
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
	static int condicion;
	switch (estado){
 3e4:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <estado>
 3e8:	8e 2f       	mov	r24, r30
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	87 30       	cpi	r24, 0x07	; 7
 3ee:	91 05       	cpc	r25, r1
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <actualizar_MEF+0x14>
 3f2:	8e c0       	rjmp	.+284    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 3f4:	fc 01       	movw	r30, r24
 3f6:	ec 5c       	subi	r30, 0xCC	; 204
 3f8:	ff 4f       	sbci	r31, 0xFF	; 255
 3fa:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__tablejump2__>
		case S0: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para R:\n\r"); estado=S1;
 3fe:	85 e2       	ldi	r24, 0x25	; 37
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 bf 02 	call	0x57e	; 0x57e <SerialPort_Send_String>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 40c:	81 c0       	rjmp	.+258    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		case S1:
			if(ProcesarInstruccion){
 40e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 412:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 416:	89 2b       	or	r24, r25
 418:	09 f4       	brne	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	7a c0       	rjmp	.+244    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				ProcesarInstruccion=0;
 41c:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 420:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,0);
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	84 ea       	ldi	r24, 0xA4	; 164
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 bd 01 	call	0x37a	; 0x37a <procesarEntrada>
				if(condicion){
 430:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <condicion.2183>
 434:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <condicion.2183+0x1>
 438:	89 2b       	or	r24, r25
 43a:	21 f0       	breq	.+8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
					estado=S2;
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 442:	66 c0       	rjmp	.+204    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				}
				else{
					estado=S0;
 444:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
 448:	63 c0       	rjmp	.+198    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				}
			}
		break;
		case S2: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para G:\n\r"); estado=S3;
 44a:	8e e4       	ldi	r24, 0x4E	; 78
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 bf 02 	call	0x57e	; 0x57e <SerialPort_Send_String>
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 458:	5b c0       	rjmp	.+182    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		case S3:
			if(ProcesarInstruccion){
 45a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 45e:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 462:	89 2b       	or	r24, r25
 464:	09 f4       	brne	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 466:	54 c0       	rjmp	.+168    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				ProcesarInstruccion=0;
 468:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 46c:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,1);
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	84 ea       	ldi	r24, 0xA4	; 164
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 bd 01 	call	0x37a	; 0x37a <procesarEntrada>
				if(condicion){
 47c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <condicion.2183>
 480:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <condicion.2183+0x1>
 484:	89 2b       	or	r24, r25
 486:	21 f0       	breq	.+8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
					estado=S4;
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 48e:	40 c0       	rjmp	.+128    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				}
				else{
					estado=S2;
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 496:	3c c0       	rjmp	.+120    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				}
			}
		break;
		case S4: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para B:\n\r"); estado=S5;
 498:	87 e7       	ldi	r24, 0x77	; 119
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 bf 02 	call	0x57e	; 0x57e <SerialPort_Send_String>
 4a0:	85 e0       	ldi	r24, 0x05	; 5
 4a2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 4a6:	34 c0       	rjmp	.+104    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		case S5:
			if(ProcesarInstruccion){
 4a8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 4ac:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 4b0:	89 2b       	or	r24, r25
 4b2:	71 f1       	breq	.+92     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				ProcesarInstruccion=0;
 4b4:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 4b8:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,2);
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	84 ea       	ldi	r24, 0xA4	; 164
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 bd 01 	call	0x37a	; 0x37a <procesarEntrada>
				if(condicion){
 4c8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <condicion.2183>
 4cc:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <condicion.2183+0x1>
 4d0:	89 2b       	or	r24, r25
 4d2:	21 f0       	breq	.+8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
					estado=S6;
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 4da:	1a c0       	rjmp	.+52     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				}
				else{
					estado=S4;
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 4e2:	16 c0       	rjmp	.+44     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
				}
			}
		break;
		case S6: pwm('R',RGB[0]); pwm('G',RGB[1]); pwm('B',RGB[2]); estado=S0;
 4e4:	ca ea       	ldi	r28, 0xAA	; 170
 4e6:	d1 e0       	ldi	r29, 0x01	; 1
 4e8:	68 81       	ld	r22, Y
 4ea:	79 81       	ldd	r23, Y+1	; 0x01
 4ec:	82 e5       	ldi	r24, 0x52	; 82
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 4f4:	6a 81       	ldd	r22, Y+2	; 0x02
 4f6:	7b 81       	ldd	r23, Y+3	; 0x03
 4f8:	87 e4       	ldi	r24, 0x47	; 71
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 500:	6c 81       	ldd	r22, Y+4	; 0x04
 502:	7d 81       	ldd	r23, Y+5	; 0x05
 504:	82 e4       	ldi	r24, 0x42	; 66
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 50c:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
		break;
	}
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <main>:
volatile int PWM_PB5=0;
volatile int pwmPB5=1;

int main(void)
{
	setupTimer();
 516:	0e 94 5a 00 	call	0xb4	; 0xb4 <setupTimer>
	setupPines();
 51a:	0e 94 66 00 	call	0xcc	; 0xcc <setupPines>
	setupSerialPort(103);
 51e:	87 e6       	ldi	r24, 0x67	; 103
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 db 02 	call	0x5b6	; 0x5b6 <setupSerialPort>
	setupADC();
 526:	0e 94 6a 00 	call	0xd4	; 0xd4 <setupADC>
	sei();
 52a:	78 94       	sei
    /* Replace with your application code */
	iniciar_MEF();
 52c:	0e 94 48 01 	call	0x290	; 0x290 <iniciar_MEF>
	while (1) 
    {
		actualizar_MEF();
 530:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <actualizar_MEF>
		intensidad();
 534:	0e 94 5d 01 	call	0x2ba	; 0x2ba <intensidad>
 538:	fb cf       	rjmp	.-10     	; 0x530 <main+0x1a>

0000053a <SerialPort_Init>:
		 //Inicializa USART
		 UCSR0B = (1<<TXEN0);               // Transmit Enable
		 UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);	//Tamaño de la cantidad de información trasmitida: 110 -> Character Size = 8 
		 UBRR0L = 103;						//baud rate = 9600bps@16MHz
		 while (! (UCSR0A & (1<<UDRE0)));   //wait until UDR0 is empty
}
 53a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 53e:	96 e0       	ldi	r25, 0x06	; 6
 540:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 544:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 548:	08 95       	ret

0000054a <SerialPort_TX_Enable>:
 54a:	e1 ec       	ldi	r30, 0xC1	; 193
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	88 60       	ori	r24, 0x08	; 8
 552:	80 83       	st	Z, r24
 554:	08 95       	ret

00000556 <SerialPort_RX_Enable>:
 556:	e1 ec       	ldi	r30, 0xC1	; 193
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	80 61       	ori	r24, 0x10	; 16
 55e:	80 83       	st	Z, r24
 560:	08 95       	ret

00000562 <SerialPort_RX_Interrupt_Enable>:
 562:	e1 ec       	ldi	r30, 0xC1	; 193
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	80 68       	ori	r24, 0x80	; 128
 56a:	80 83       	st	Z, r24
 56c:	08 95       	ret

0000056e <SerialPort_Wait_For_TX_Buffer_Free>:
 56e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 572:	85 ff       	sbrs	r24, 5
 574:	fc cf       	rjmp	.-8      	; 0x56e <SerialPort_Wait_For_TX_Buffer_Free>
 576:	08 95       	ret

00000578 <SerialPort_Send_Data>:
 578:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 57c:	08 95       	ret

0000057e <SerialPort_Send_String>:
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	7c 01       	movw	r14, r24
 58a:	c0 e0       	ldi	r28, 0x00	; 0
 58c:	07 c0       	rjmp	.+14     	; 0x59c <SerialPort_Send_String+0x1e>
 58e:	0e 94 b7 02 	call	0x56e	; 0x56e <SerialPort_Wait_For_TX_Buffer_Free>
 592:	f8 01       	movw	r30, r16
 594:	80 81       	ld	r24, Z
 596:	0e 94 bc 02 	call	0x578	; 0x578 <SerialPort_Send_Data>
 59a:	cf 5f       	subi	r28, 0xFF	; 255
 59c:	87 01       	movw	r16, r14
 59e:	0c 0f       	add	r16, r28
 5a0:	11 1d       	adc	r17, r1
 5a2:	f8 01       	movw	r30, r16
 5a4:	80 81       	ld	r24, Z
 5a6:	81 11       	cpse	r24, r1
 5a8:	f2 cf       	rjmp	.-28     	; 0x58e <SerialPort_Send_String+0x10>
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	08 95       	ret

000005b6 <setupSerialPort>:
/*
*Configuración de la terminal serie
*/
void setupSerialPort(int cod){
	SerialPort_Init(cod);
 5b6:	0e 94 9d 02 	call	0x53a	; 0x53a <SerialPort_Init>
	SerialPort_TX_Enable();
 5ba:	0e 94 a5 02 	call	0x54a	; 0x54a <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 5be:	0e 94 ab 02 	call	0x556	; 0x556 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 5c2:	0e 94 b1 02 	call	0x562	; 0x562 <SerialPort_RX_Interrupt_Enable>
 5c6:	08 95       	ret

000005c8 <__tablejump2__>:
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	05 90       	lpm	r0, Z+
 5ce:	f4 91       	lpm	r31, Z
 5d0:	e0 2d       	mov	r30, r0
 5d2:	09 94       	ijmp

000005d4 <atoi>:
 5d4:	fc 01       	movw	r30, r24
 5d6:	88 27       	eor	r24, r24
 5d8:	99 27       	eor	r25, r25
 5da:	e8 94       	clt
 5dc:	21 91       	ld	r18, Z+
 5de:	20 32       	cpi	r18, 0x20	; 32
 5e0:	e9 f3       	breq	.-6      	; 0x5dc <atoi+0x8>
 5e2:	29 30       	cpi	r18, 0x09	; 9
 5e4:	10 f0       	brcs	.+4      	; 0x5ea <atoi+0x16>
 5e6:	2e 30       	cpi	r18, 0x0E	; 14
 5e8:	c8 f3       	brcs	.-14     	; 0x5dc <atoi+0x8>
 5ea:	2b 32       	cpi	r18, 0x2B	; 43
 5ec:	41 f0       	breq	.+16     	; 0x5fe <atoi+0x2a>
 5ee:	2d 32       	cpi	r18, 0x2D	; 45
 5f0:	39 f4       	brne	.+14     	; 0x600 <atoi+0x2c>
 5f2:	68 94       	set
 5f4:	04 c0       	rjmp	.+8      	; 0x5fe <atoi+0x2a>
 5f6:	0e 94 08 03 	call	0x610	; 0x610 <__mulhi_const_10>
 5fa:	82 0f       	add	r24, r18
 5fc:	91 1d       	adc	r25, r1
 5fe:	21 91       	ld	r18, Z+
 600:	20 53       	subi	r18, 0x30	; 48
 602:	2a 30       	cpi	r18, 0x0A	; 10
 604:	c0 f3       	brcs	.-16     	; 0x5f6 <atoi+0x22>
 606:	1e f4       	brtc	.+6      	; 0x60e <atoi+0x3a>
 608:	90 95       	com	r25
 60a:	81 95       	neg	r24
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	08 95       	ret

00000610 <__mulhi_const_10>:
 610:	7a e0       	ldi	r23, 0x0A	; 10
 612:	97 9f       	mul	r25, r23
 614:	90 2d       	mov	r25, r0
 616:	87 9f       	mul	r24, r23
 618:	80 2d       	mov	r24, r0
 61a:	91 0d       	add	r25, r1
 61c:	11 24       	eor	r1, r1
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
