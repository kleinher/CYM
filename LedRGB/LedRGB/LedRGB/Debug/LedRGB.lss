
LedRGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  0000064c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  008001a0  008001a0  00000780  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001320  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f8  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a69  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  000030d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000781  00000000  00000000  0000344c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077d  00000000  00000000  00003bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000434a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	13 02       	muls	r17, r19
  6a:	1b 02       	muls	r17, r27
  6c:	39 02       	muls	r19, r25
  6e:	41 02       	muls	r20, r17
  70:	60 02       	muls	r22, r16
  72:	68 02       	muls	r22, r24
  74:	86 02       	muls	r24, r22

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ec e4       	ldi	r30, 0x4C	; 76
  8a:	f6 e0       	ldi	r31, 0x06	; 6
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 3a       	cpi	r26, 0xA0	; 160
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 ea       	ldi	r26, 0xA0	; 160
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 3f       	cpi	r26, 0xFA	; 250
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 9f 02 	call	0x53e	; 0x53e <main>
  ac:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <setupTimer>:
extern volatile int OCR0_PB5;
extern volatile int PWM_PB5;
extern volatile int newData;
/*Configuración del timer 0*/
void setupTimer(){
	TCCR0B=0x02; // modo CTC
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	85 bd       	out	0x25, r24	; 37
	TCCR0A=(1<<CS02)|(1<<CS00); //configurar el registro del timer0 como temporizador con prescalador de 1024
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	84 bd       	out	0x24, r24	; 36
	OCR0A=255;					//el registro empieza con valor 255
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bd       	out	0x27, r24	; 39
	TIMSK0|= (1<<OCIE0A);	    //habilita la interrupcion por desbordamiento del timer0
  c0:	ee e6       	ldi	r30, 0x6E	; 110
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <setupPines>:
}

void setupPines(){
	DDRB |= (1<<1)|(1<<2)|(0<<5);
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	84 b9       	out	0x04, r24	; 4
  d2:	08 95       	ret

000000d4 <setupADC>:
}

void setupADC(){
	ADCSRA = 0;
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	ADCSRB = 0;
  da:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX |= (1 << REFS1); //set reference voltage
  de:	ac e7       	ldi	r26, 0x7C	; 124
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); //left align the ADC value- so we can read highest 8 bits from ADCH register only //
  e8:	8c 91       	ld	r24, X
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADPS2); //prescalador ADC 8
  ee:	80 81       	ld	r24, Z
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //enabble auto trigger
  f4:	80 81       	ld	r24, Z
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); //enable interrupts when measurement complete
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable ADC
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //start ADC measurements
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <__vector_14>:

/*
*Rutina de atención de interrupción Timer
*/
ISR(TIMER0_COMPA_vect)
{	
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
	static int flag=0;
	if(PWM_PB5==1){
 11c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <PWM_PB5>
 120:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <PWM_PB5+0x1>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	11 f5       	brne	.+68     	; 0x16c <__vector_14+0x5e>
		if(flag==0){
 128:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <flag.2151>
 12c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <flag.2151+0x1>
 130:	89 2b       	or	r24, r25
 132:	79 f4       	brne	.+30     	; 0x152 <__vector_14+0x44>
			flag=1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <flag.2151+0x1>
 13c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <flag.2151>
			//PORTB &= ~(1<<5); // invertido
			PORTB |= (1<<5); // invertido
 140:	85 b1       	in	r24, 0x05	; 5
 142:	80 62       	ori	r24, 0x20	; 32
 144:	85 b9       	out	0x05, r24	; 5
			OCR0A=OCR0_PB5;
 146:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <OCR0_PB5>
 14a:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <OCR0_PB5+0x1>
 14e:	87 bd       	out	0x27, r24	; 39
 150:	0d c0       	rjmp	.+26     	; 0x16c <__vector_14+0x5e>
		}
		else {
			flag=0;
 152:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <flag.2151+0x1>
 156:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <flag.2151>
			//PORTB |= (1<<5); // no invertido
			PORTB &= ~(1<<5); // invertido
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	85 b9       	out	0x05, r24	; 5
			OCR0A=(255-OCR0_PB5);
 160:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <OCR0_PB5>
 164:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <OCR0_PB5+0x1>
 168:	80 95       	com	r24
 16a:	87 bd       	out	0x27, r24	; 39
		}
	}
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_18>:

/*
*Rutina de atención de interrupción Terminal serie
*/
ISR(USART_RX_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	volatile char RX_Data = 0;
 19a:	19 82       	std	Y+1, r1	; 0x01
	static short int Index=0;
	
	RX_Data = UDR0;				//Obtengo la información del terminal
 19c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a0:	89 83       	std	Y+1, r24	; 0x01
	if(RX_Data != '\r'){		//si no es un salto de linea entonces almaceno caracter en el buffer
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	8d 30       	cpi	r24, 0x0D	; 13
 1a6:	89 f0       	breq	.+34     	; 0x1ca <__vector_18+0x50>
		BufferRX[Index++] = RX_Data;
 1a8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 1ac:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 1b0:	9c 01       	movw	r18, r24
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <__data_end+0x1>
 1ba:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__data_end>
 1be:	29 81       	ldd	r18, Y+1	; 0x01
 1c0:	fc 01       	movw	r30, r24
 1c2:	eb 52       	subi	r30, 0x2B	; 43
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	20 83       	st	Z, r18
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <__vector_18+0x72>
	}
	else{						//Si es un salto de linea entonces
		BufferRX[Index]='\0';	//Determino el final del string
 1ca:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__data_end>
 1ce:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <__data_end+0x1>
 1d2:	eb 52       	subi	r30, 0x2B	; 43
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	10 82       	st	Z, r1
		ProcesarInstruccion = true; //Activo flag para atención de instrucción
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <ProcesarInstruccion+0x1>
 1e0:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <ProcesarInstruccion>
		Index=0;				//Vuelvo el indice al principio del vector
 1e4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
 1e8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
	}
}
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_21>:

ISR(ADC_vect) {//when new ADC value ready
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
	newData = ADCH;//get value from A0
 216:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <newData+0x1>
 220:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <newData>
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <pwm>:
		actualizar_MEF();
		intensidad();
    }
}

void pwm(int pin,int num){
 232:	9c 01       	movw	r18, r24
	TCCR1B |= (1<<CS11);//prescalar /8
 234:	e1 e8       	ldi	r30, 0x81	; 129
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	90 81       	ld	r25, Z
 23a:	92 60       	ori	r25, 0x02	; 2
 23c:	90 83       	st	Z, r25
	switch(pin){
 23e:	27 34       	cpi	r18, 0x47	; 71
 240:	31 05       	cpc	r19, r1
 242:	89 f0       	breq	.+34     	; 0x266 <pwm+0x34>
 244:	22 35       	cpi	r18, 0x52	; 82
 246:	31 05       	cpc	r19, r1
 248:	21 f0       	breq	.+8      	; 0x252 <pwm+0x20>
 24a:	22 34       	cpi	r18, 0x42	; 66
 24c:	31 05       	cpc	r19, r1
 24e:	49 f5       	brne	.+82     	; 0x2a2 <pwm+0x70>
 250:	14 c0       	rjmp	.+40     	; 0x27a <pwm+0x48>
		case 'R':
			TCCR1A |= (1<<WGM12)|(1<<WGM10)|(1<<COM1A1)|(1<<COM1A0);//fast pwm, inverted
 252:	e0 e8       	ldi	r30, 0x80	; 128
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	89 6c       	ori	r24, 0xC9	; 201
 25a:	80 83       	st	Z, r24
			OCR1A=num;
 25c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 260:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 264:	08 95       	ret
		case 'G':
			TCCR1A |= (1<<WGM12)|(1<<WGM10)|(1<<COM1B1)|(1<<COM1B0);//fast pwm, inverted
 266:	e0 e8       	ldi	r30, 0x80	; 128
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	89 63       	ori	r24, 0x39	; 57
 26e:	80 83       	st	Z, r24
			OCR1B=num;
 270:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 274:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 278:	08 95       	ret
		case 'B':
			if(num == 0){
 27a:	61 15       	cp	r22, r1
 27c:	71 05       	cpc	r23, r1
 27e:	21 f4       	brne	.+8      	; 0x288 <pwm+0x56>
				DDRB &= ~(1<<5);
 280:	84 b1       	in	r24, 0x04	; 4
 282:	8f 7d       	andi	r24, 0xDF	; 223
 284:	84 b9       	out	0x04, r24	; 4
 286:	08 95       	ret
			}
			else{
				DDRB |= (1<<5);
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	80 62       	ori	r24, 0x20	; 32
 28c:	84 b9       	out	0x04, r24	; 4
				PWM_PB5=1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <PWM_PB5+0x1>
 296:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <PWM_PB5>
				OCR0_PB5=num;
 29a:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <OCR0_PB5+0x1>
 29e:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <OCR0_PB5>
 2a2:	08 95       	ret

000002a4 <iniciar_MEF>:
		break;
	}
}

void iniciar_MEF(){
	estado=S0;
 2a4:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
	//PWM manual entre 7 y 248 anda joya (simulador)
	pwm('R',0);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	82 e5       	ldi	r24, 0x52	; 82
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	pwm('G',0);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	87 e4       	ldi	r24, 0x47	; 71
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	pwm('B',0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	82 e4       	ldi	r24, 0x42	; 66
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 2cc:	08 95       	ret

000002ce <intensidad>:
		break;
	}
}

void intensidad(){
	if(RGB[0]>0 && newData+RGB[0]>=0 && newData+RGB[0]<=255){
 2ce:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <RGB>
 2d2:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <RGB+0x1>
 2d6:	16 16       	cp	r1, r22
 2d8:	17 06       	cpc	r1, r23
 2da:	e4 f4       	brge	.+56     	; 0x314 <intensidad+0x46>
 2dc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 2e0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 2e4:	86 0f       	add	r24, r22
 2e6:	97 1f       	adc	r25, r23
 2e8:	99 23       	and	r25, r25
 2ea:	a4 f0       	brlt	.+40     	; 0x314 <intensidad+0x46>
 2ec:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 2f0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 2f4:	86 0f       	add	r24, r22
 2f6:	97 1f       	adc	r25, r23
 2f8:	8f 3f       	cpi	r24, 0xFF	; 255
 2fa:	91 05       	cpc	r25, r1
 2fc:	09 f0       	breq	.+2      	; 0x300 <intensidad+0x32>
 2fe:	54 f4       	brge	.+20     	; 0x314 <intensidad+0x46>
		pwm('R',RGB[0]+newData);
 300:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 304:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 308:	68 0f       	add	r22, r24
 30a:	79 1f       	adc	r23, r25
 30c:	82 e5       	ldi	r24, 0x52	; 82
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	}
	if(RGB[1]>0 && newData+RGB[1]>=0 && newData+RGB[1]<=255){
 314:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <RGB+0x2>
 318:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <RGB+0x3>
 31c:	16 16       	cp	r1, r22
 31e:	17 06       	cpc	r1, r23
 320:	e4 f4       	brge	.+56     	; 0x35a <intensidad+0x8c>
 322:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 326:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 32a:	86 0f       	add	r24, r22
 32c:	97 1f       	adc	r25, r23
 32e:	99 23       	and	r25, r25
 330:	a4 f0       	brlt	.+40     	; 0x35a <intensidad+0x8c>
 332:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 336:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 33a:	86 0f       	add	r24, r22
 33c:	97 1f       	adc	r25, r23
 33e:	8f 3f       	cpi	r24, 0xFF	; 255
 340:	91 05       	cpc	r25, r1
 342:	09 f0       	breq	.+2      	; 0x346 <intensidad+0x78>
 344:	54 f4       	brge	.+20     	; 0x35a <intensidad+0x8c>
		pwm('G',RGB[1]+newData);
 346:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 34a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 34e:	68 0f       	add	r22, r24
 350:	79 1f       	adc	r23, r25
 352:	87 e4       	ldi	r24, 0x47	; 71
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
	}
	if(RGB[2]>0 && newData+RGB[2]>=0 && newData+RGB[2]<=255){
 35a:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <RGB+0x4>
 35e:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <RGB+0x5>
 362:	16 16       	cp	r1, r22
 364:	17 06       	cpc	r1, r23
 366:	e4 f4       	brge	.+56     	; 0x3a0 <intensidad+0xd2>
 368:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 36c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 370:	86 0f       	add	r24, r22
 372:	97 1f       	adc	r25, r23
 374:	99 23       	and	r25, r25
 376:	a4 f0       	brlt	.+40     	; 0x3a0 <intensidad+0xd2>
 378:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 37c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 380:	86 0f       	add	r24, r22
 382:	97 1f       	adc	r25, r23
 384:	8f 3f       	cpi	r24, 0xFF	; 255
 386:	91 05       	cpc	r25, r1
 388:	09 f0       	breq	.+2      	; 0x38c <intensidad+0xbe>
 38a:	54 f4       	brge	.+20     	; 0x3a0 <intensidad+0xd2>
		pwm('B',RGB[2]+newData);
 38c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <newData>
 390:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <newData+0x1>
 394:	68 0f       	add	r22, r24
 396:	79 1f       	adc	r23, r25
 398:	82 e4       	ldi	r24, 0x42	; 66
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 3a0:	08 95       	ret

000003a2 <procesarEntrada>:
	}
}

void procesarEntrada(int *condicion, int cont){
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	7c 01       	movw	r14, r24
 3b0:	eb 01       	movw	r28, r22

	int num = atoi((char *) BufferRX);
 3b2:	85 ed       	ldi	r24, 0xD5	; 213
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <atoi>
 3ba:	8c 01       	movw	r16, r24
	SerialPort_Send_String(BufferRX);
 3bc:	85 ed       	ldi	r24, 0xD5	; 213
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SerialPort_Send_String>
	SerialPort_Send_String("\n\r");
 3c4:	82 e2       	ldi	r24, 0x22	; 34
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SerialPort_Send_String>
	if (num>=0 && num <= 255){    //Verifica el rango valido
 3cc:	0f 3f       	cpi	r16, 0xFF	; 255
 3ce:	11 05       	cpc	r17, r1
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <procesarEntrada+0x32>
 3d2:	60 f4       	brcc	.+24     	; 0x3ec <procesarEntrada+0x4a>
		RGB[cont] = num;
 3d4:	cc 0f       	add	r28, r28
 3d6:	dd 1f       	adc	r29, r29
 3d8:	c6 55       	subi	r28, 0x56	; 86
 3da:	de 4f       	sbci	r29, 0xFE	; 254
 3dc:	19 83       	std	Y+1, r17	; 0x01
 3de:	08 83       	st	Y, r16
		*condicion=true;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	f7 01       	movw	r30, r14
 3e6:	91 83       	std	Z+1, r25	; 0x01
 3e8:	80 83       	st	Z, r24
 3ea:	07 c0       	rjmp	.+14     	; 0x3fa <procesarEntrada+0x58>
	}
	else {						//En el caso de que no es ninguno de las opciones validas, devuelve 1
		SerialPort_Send_String("El numero debe estar entre 0 y 255\n\r");
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SerialPort_Send_String>
		*condicion=false;
 3f4:	f7 01       	movw	r30, r14
 3f6:	11 82       	std	Z+1, r1	; 0x01
 3f8:	10 82       	st	Z, r1
	}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	ff 90       	pop	r15
 404:	ef 90       	pop	r14
 406:	08 95       	ret

00000408 <actualizar_MEF>:
	pwm('R',0);
	pwm('G',0);
	pwm('B',0);
}

void actualizar_MEF(){
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
	static int condicion;
	switch (estado){
 40c:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <estado>
 410:	8e 2f       	mov	r24, r30
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	87 30       	cpi	r24, 0x07	; 7
 416:	91 05       	cpc	r25, r1
 418:	08 f0       	brcs	.+2      	; 0x41c <actualizar_MEF+0x14>
 41a:	8e c0       	rjmp	.+284    	; 0x538 <actualizar_MEF+0x130>
 41c:	fc 01       	movw	r30, r24
 41e:	ec 5c       	subi	r30, 0xCC	; 204
 420:	ff 4f       	sbci	r31, 0xFF	; 255
 422:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__tablejump2__>
		case S0: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para R:\n\r"); estado=S1;
 426:	85 e2       	ldi	r24, 0x25	; 37
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SerialPort_Send_String>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 434:	81 c0       	rjmp	.+258    	; 0x538 <actualizar_MEF+0x130>
		case S1:
			if(ProcesarInstruccion){
 436:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 43a:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 43e:	89 2b       	or	r24, r25
 440:	09 f4       	brne	.+2      	; 0x444 <actualizar_MEF+0x3c>
 442:	7a c0       	rjmp	.+244    	; 0x538 <actualizar_MEF+0x130>
				ProcesarInstruccion=0;
 444:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 448:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,0);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	84 ea       	ldi	r24, 0xA4	; 164
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <procesarEntrada>
				if(condicion){
 458:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <condicion.2183>
 45c:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <condicion.2183+0x1>
 460:	89 2b       	or	r24, r25
 462:	21 f0       	breq	.+8      	; 0x46c <actualizar_MEF+0x64>
					estado=S2;
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 46a:	66 c0       	rjmp	.+204    	; 0x538 <actualizar_MEF+0x130>
				}
				else{
					estado=S0;
 46c:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
 470:	63 c0       	rjmp	.+198    	; 0x538 <actualizar_MEF+0x130>
				}
			}
		break;
		case S2: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para G:\n\r"); estado=S3;
 472:	8e e4       	ldi	r24, 0x4E	; 78
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SerialPort_Send_String>
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 480:	5b c0       	rjmp	.+182    	; 0x538 <actualizar_MEF+0x130>
		case S3:
			if(ProcesarInstruccion){
 482:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 486:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 48a:	89 2b       	or	r24, r25
 48c:	09 f4       	brne	.+2      	; 0x490 <actualizar_MEF+0x88>
 48e:	54 c0       	rjmp	.+168    	; 0x538 <actualizar_MEF+0x130>
				ProcesarInstruccion=0;
 490:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 494:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,1);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	84 ea       	ldi	r24, 0xA4	; 164
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <procesarEntrada>
				if(condicion){
 4a4:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <condicion.2183>
 4a8:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <condicion.2183+0x1>
 4ac:	89 2b       	or	r24, r25
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <actualizar_MEF+0xb0>
					estado=S4;
 4b0:	84 e0       	ldi	r24, 0x04	; 4
 4b2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 4b6:	40 c0       	rjmp	.+128    	; 0x538 <actualizar_MEF+0x130>
				}
				else{
					estado=S2;
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 4be:	3c c0       	rjmp	.+120    	; 0x538 <actualizar_MEF+0x130>
				}
			}
		break;
		case S4: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para B:\n\r"); estado=S5;
 4c0:	87 e7       	ldi	r24, 0x77	; 119
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SerialPort_Send_String>
 4c8:	85 e0       	ldi	r24, 0x05	; 5
 4ca:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
		break;
 4ce:	34 c0       	rjmp	.+104    	; 0x538 <actualizar_MEF+0x130>
		case S5:
			if(ProcesarInstruccion){
 4d0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ProcesarInstruccion>
 4d4:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ProcesarInstruccion+0x1>
 4d8:	89 2b       	or	r24, r25
 4da:	71 f1       	breq	.+92     	; 0x538 <actualizar_MEF+0x130>
				ProcesarInstruccion=0;
 4dc:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <ProcesarInstruccion+0x1>
 4e0:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <ProcesarInstruccion>
				procesarEntrada(&condicion,2);
 4e4:	62 e0       	ldi	r22, 0x02	; 2
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	84 ea       	ldi	r24, 0xA4	; 164
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <procesarEntrada>
				if(condicion){
 4f0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <condicion.2183>
 4f4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <condicion.2183+0x1>
 4f8:	89 2b       	or	r24, r25
 4fa:	21 f0       	breq	.+8      	; 0x504 <actualizar_MEF+0xfc>
					estado=S6;
 4fc:	86 e0       	ldi	r24, 0x06	; 6
 4fe:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 502:	1a c0       	rjmp	.+52     	; 0x538 <actualizar_MEF+0x130>
				}
				else{
					estado=S4;
 504:	84 e0       	ldi	r24, 0x04	; 4
 506:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <estado>
 50a:	16 c0       	rjmp	.+44     	; 0x538 <actualizar_MEF+0x130>
				}
			}
		break;
		case S6: pwm('R',RGB[0]); pwm('G',RGB[1]); pwm('B',RGB[2]); estado=S0;
 50c:	ca ea       	ldi	r28, 0xAA	; 170
 50e:	d1 e0       	ldi	r29, 0x01	; 1
 510:	68 81       	ld	r22, Y
 512:	79 81       	ldd	r23, Y+1	; 0x01
 514:	82 e5       	ldi	r24, 0x52	; 82
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 51c:	6a 81       	ldd	r22, Y+2	; 0x02
 51e:	7b 81       	ldd	r23, Y+3	; 0x03
 520:	87 e4       	ldi	r24, 0x47	; 71
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 528:	6c 81       	ldd	r22, Y+4	; 0x04
 52a:	7d 81       	ldd	r23, Y+5	; 0x05
 52c:	82 e4       	ldi	r24, 0x42	; 66
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 19 01 	call	0x232	; 0x232 <pwm>
 534:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <estado>
		break;
	}
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <main>:
volatile int PWM_PB5=0;
volatile int pwmPB5=1;

int main(void)
{
	setupTimer();
 53e:	0e 94 5a 00 	call	0xb4	; 0xb4 <setupTimer>
	setupPines();
 542:	0e 94 66 00 	call	0xcc	; 0xcc <setupPines>
	setupSerialPort(103);
 546:	87 e6       	ldi	r24, 0x67	; 103
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 ef 02 	call	0x5de	; 0x5de <setupSerialPort>
	setupADC();
 54e:	0e 94 6a 00 	call	0xd4	; 0xd4 <setupADC>
	sei();
 552:	78 94       	sei
    /* Replace with your application code */
	iniciar_MEF();
 554:	0e 94 52 01 	call	0x2a4	; 0x2a4 <iniciar_MEF>
	while (1) 
    {
		actualizar_MEF();
 558:	0e 94 04 02 	call	0x408	; 0x408 <actualizar_MEF>
		intensidad();
 55c:	0e 94 67 01 	call	0x2ce	; 0x2ce <intensidad>
 560:	fb cf       	rjmp	.-10     	; 0x558 <main+0x1a>

00000562 <SerialPort_Init>:
 562:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 566:	96 e0       	ldi	r25, 0x06	; 6
 568:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 56c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 570:	08 95       	ret

00000572 <SerialPort_TX_Enable>:
 572:	e1 ec       	ldi	r30, 0xC1	; 193
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	88 60       	ori	r24, 0x08	; 8
 57a:	80 83       	st	Z, r24
 57c:	08 95       	ret

0000057e <SerialPort_RX_Enable>:
 57e:	e1 ec       	ldi	r30, 0xC1	; 193
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	80 61       	ori	r24, 0x10	; 16
 586:	80 83       	st	Z, r24
 588:	08 95       	ret

0000058a <SerialPort_RX_Interrupt_Enable>:
 58a:	e1 ec       	ldi	r30, 0xC1	; 193
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	80 68       	ori	r24, 0x80	; 128
 592:	80 83       	st	Z, r24
 594:	08 95       	ret

00000596 <SerialPort_Wait_For_TX_Buffer_Free>:
 596:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 59a:	85 ff       	sbrs	r24, 5
 59c:	fc cf       	rjmp	.-8      	; 0x596 <SerialPort_Wait_For_TX_Buffer_Free>
 59e:	08 95       	ret

000005a0 <SerialPort_Send_Data>:
 5a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5a4:	08 95       	ret

000005a6 <SerialPort_Send_String>:
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	7c 01       	movw	r14, r24
 5b2:	c0 e0       	ldi	r28, 0x00	; 0
 5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <SerialPort_Send_String+0x1e>
 5b6:	0e 94 cb 02 	call	0x596	; 0x596 <SerialPort_Wait_For_TX_Buffer_Free>
 5ba:	f8 01       	movw	r30, r16
 5bc:	80 81       	ld	r24, Z
 5be:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SerialPort_Send_Data>
 5c2:	cf 5f       	subi	r28, 0xFF	; 255
 5c4:	87 01       	movw	r16, r14
 5c6:	0c 0f       	add	r16, r28
 5c8:	11 1d       	adc	r17, r1
 5ca:	f8 01       	movw	r30, r16
 5cc:	80 81       	ld	r24, Z
 5ce:	81 11       	cpse	r24, r1
 5d0:	f2 cf       	rjmp	.-28     	; 0x5b6 <SerialPort_Send_String+0x10>
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	ff 90       	pop	r15
 5da:	ef 90       	pop	r14
 5dc:	08 95       	ret

000005de <setupSerialPort>:
 5de:	0e 94 b1 02 	call	0x562	; 0x562 <SerialPort_Init>
 5e2:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_TX_Enable>
 5e6:	0e 94 bf 02 	call	0x57e	; 0x57e <SerialPort_RX_Enable>
 5ea:	0e 94 c5 02 	call	0x58a	; 0x58a <SerialPort_RX_Interrupt_Enable>
 5ee:	08 95       	ret

000005f0 <__tablejump2__>:
 5f0:	ee 0f       	add	r30, r30
 5f2:	ff 1f       	adc	r31, r31
 5f4:	05 90       	lpm	r0, Z+
 5f6:	f4 91       	lpm	r31, Z
 5f8:	e0 2d       	mov	r30, r0
 5fa:	09 94       	ijmp

000005fc <atoi>:
 5fc:	fc 01       	movw	r30, r24
 5fe:	88 27       	eor	r24, r24
 600:	99 27       	eor	r25, r25
 602:	e8 94       	clt
 604:	21 91       	ld	r18, Z+
 606:	20 32       	cpi	r18, 0x20	; 32
 608:	e9 f3       	breq	.-6      	; 0x604 <atoi+0x8>
 60a:	29 30       	cpi	r18, 0x09	; 9
 60c:	10 f0       	brcs	.+4      	; 0x612 <atoi+0x16>
 60e:	2e 30       	cpi	r18, 0x0E	; 14
 610:	c8 f3       	brcs	.-14     	; 0x604 <atoi+0x8>
 612:	2b 32       	cpi	r18, 0x2B	; 43
 614:	41 f0       	breq	.+16     	; 0x626 <atoi+0x2a>
 616:	2d 32       	cpi	r18, 0x2D	; 45
 618:	39 f4       	brne	.+14     	; 0x628 <atoi+0x2c>
 61a:	68 94       	set
 61c:	04 c0       	rjmp	.+8      	; 0x626 <atoi+0x2a>
 61e:	0e 94 1c 03 	call	0x638	; 0x638 <__mulhi_const_10>
 622:	82 0f       	add	r24, r18
 624:	91 1d       	adc	r25, r1
 626:	21 91       	ld	r18, Z+
 628:	20 53       	subi	r18, 0x30	; 48
 62a:	2a 30       	cpi	r18, 0x0A	; 10
 62c:	c0 f3       	brcs	.-16     	; 0x61e <atoi+0x22>
 62e:	1e f4       	brtc	.+6      	; 0x636 <atoi+0x3a>
 630:	90 95       	com	r25
 632:	81 95       	neg	r24
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	08 95       	ret

00000638 <__mulhi_const_10>:
 638:	7a e0       	ldi	r23, 0x0A	; 10
 63a:	97 9f       	mul	r25, r23
 63c:	90 2d       	mov	r25, r0
 63e:	87 9f       	mul	r24, r23
 640:	80 2d       	mov	r24, r0
 642:	91 0d       	add	r25, r1
 644:	11 24       	eor	r1, r1
 646:	08 95       	ret

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
