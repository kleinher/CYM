
LedRGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  008001a0  008001a0  00000806  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ae  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a07  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a63  00000000  00000000  0000278d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  000031f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078e  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000860  00000000  00000000  00003d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	2e 02       	muls	r18, r30
  6a:	36 02       	muls	r19, r22
  6c:	54 02       	muls	r21, r20
  6e:	5c 02       	muls	r21, r28
  70:	7b 02       	muls	r23, r27
  72:	83 02       	muls	r24, r19
  74:	a1 02       	muls	r26, r17

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e2 ed       	ldi	r30, 0xD2	; 210
  8a:	f6 e0       	ldi	r31, 0x06	; 6
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 3a       	cpi	r26, 0xA0	; 160
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 ea       	ldi	r26, 0xA0	; 160
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 3f       	cpi	r26, 0xFC	; 252
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 ba 02 	call	0x574	; 0x574 <main>
  ac:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <setupTimer>:
extern volatile int PWM_PB5;
extern volatile int flagPote;

/*Configuración del timer 0*/
void setupTimer(){
	TCCR0B=(1<<CS02)|(1<<CS00);	//configurar el registro del timer0 como temporizador con prescalador de 1024
  b4:	85 e0       	ldi	r24, 0x05	; 5
  b6:	85 bd       	out	0x25, r24	; 37
	TCCR0A=0x02;				// modo CTC 
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	84 bd       	out	0x24, r24	; 36
	OCR0A=255;					//el registro empieza con valor 255
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bd       	out	0x27, r24	; 39
	TIMSK0|= (1<<OCIE0A);	    //habilita la interrupcion por desbordamiento del timer0
  c0:	ee e6       	ldi	r30, 0x6E	; 110
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <setupPines>:
}

void setupPines(){
	DDRB |= (1<<1)|(1<<2)|(1<<5);
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	86 62       	ori	r24, 0x26	; 38
  d0:	84 b9       	out	0x04, r24	; 4
  d2:	08 95       	ret

000000d4 <setupADC>:
}

void setupADC(){
	ADCSRA = 0;
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	ADCSRB = 0;
  da:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX |= (1 << REFS1); //set reference voltage
  de:	ac e7       	ldi	r26, 0x7C	; 124
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); //left align the ADC value- so we can read highest 8 bits from ADCH register only //
  e8:	8c 91       	ld	r24, X
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0); //prescalador ADC 8
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //enabble auto trigger
  f4:	80 81       	ld	r24, Z
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); //enable interrupts when measurement complete
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable ADC
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //start ADC measurements
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <__vector_14>:

/*
*Rutina de atención de interrupción Timer
*/
ISR(TIMER0_COMPA_vect)
{	
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
	static int flag=0;
	if(PWM_PB5==1){
 11c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <PWM_PB5>
 120:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <PWM_PB5+0x1>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	c1 f5       	brne	.+112    	; 0x198 <__vector_14+0x8a>
		if(OCR0_PB5>241){
 128:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <OCR0_PB5>
 12c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <OCR0_PB5+0x1>
 130:	82 3f       	cpi	r24, 0xF2	; 242
 132:	91 05       	cpc	r25, r1
 134:	24 f0       	brlt	.+8      	; 0x13e <__vector_14+0x30>
			//PORTB |= (1<<5); //no invertido
			PORTB &= ~(1<<5); //invertido
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	2d c0       	rjmp	.+90     	; 0x198 <__vector_14+0x8a>
		}
		else if(OCR0_PB5<8){
 13e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <OCR0_PB5>
 142:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <OCR0_PB5+0x1>
 146:	08 97       	sbiw	r24, 0x08	; 8
 148:	24 f4       	brge	.+8      	; 0x152 <__vector_14+0x44>
			//PORTB &= ~(1<<5); //no invertido
			PORTB |= (1<<5); //invertido
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	80 62       	ori	r24, 0x20	; 32
 14e:	85 b9       	out	0x05, r24	; 5
 150:	23 c0       	rjmp	.+70     	; 0x198 <__vector_14+0x8a>
		}
		else{
			if(flag==0){
 152:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <flag.2151>
 156:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <flag.2151+0x1>
 15a:	89 2b       	or	r24, r25
 15c:	81 f4       	brne	.+32     	; 0x17e <__vector_14+0x70>
				flag=1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <flag.2151+0x1>
 166:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <flag.2151>
				//PORTB &= ~(1<<5); // invertido
				PORTB |= (1<<5); // invertido
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	85 b9       	out	0x05, r24	; 5
				OCR0A=(256-OCR0_PB5);
 170:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <OCR0_PB5>
 174:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <OCR0_PB5+0x1>
 178:	81 95       	neg	r24
 17a:	87 bd       	out	0x27, r24	; 39
 17c:	0d c0       	rjmp	.+26     	; 0x198 <__vector_14+0x8a>
			}
			else {
				flag=0;
 17e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <flag.2151+0x1>
 182:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <flag.2151>
				//PORTB |= (1<<5); // no invertido
				PORTB &= ~(1<<5); // invertido
 186:	85 b1       	in	r24, 0x05	; 5
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	85 b9       	out	0x05, r24	; 5
				OCR0A=(OCR0_PB5-1);
 18c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <OCR0_PB5>
 190:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <OCR0_PB5+0x1>
 194:	81 50       	subi	r24, 0x01	; 1
 196:	87 bd       	out	0x27, r24	; 39
			}
		}
	}
}
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_18>:

/*
*Rutina de atención de interrupción Terminal serie
*/
ISR(USART_RX_vect){
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	1f 92       	push	r1
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
	volatile char RX_Data = 0;
 1c6:	19 82       	std	Y+1, r1	; 0x01
	static short int Index=0;
	
	RX_Data = UDR0;				//Obtengo la información del terminal
 1c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1cc:	89 83       	std	Y+1, r24	; 0x01
	if(RX_Data != '\r'){		//si no es un salto de linea entonces almaceno caracter en el buffer
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	8d 30       	cpi	r24, 0x0D	; 13
 1d2:	89 f0       	breq	.+34     	; 0x1f6 <__vector_18+0x50>
		BufferRX[Index++] = RX_Data;
 1d4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 1d8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 1dc:	9c 01       	movw	r18, r24
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <__data_end+0x1>
 1e6:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__data_end>
 1ea:	29 81       	ldd	r18, Y+1	; 0x01
 1ec:	fc 01       	movw	r30, r24
 1ee:	e9 52       	subi	r30, 0x29	; 41
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	20 83       	st	Z, r18
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <__vector_18+0x72>
	}
	else{						//Si es un salto de linea entonces
		BufferRX[Index]='\0';	//Determino el final del string
 1f6:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__data_end>
 1fa:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <__data_end+0x1>
 1fe:	e9 52       	subi	r30, 0x29	; 41
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	10 82       	st	Z, r1
		ProcesarInstruccion = true; //Activo flag para atención de instrucción
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <ProcesarInstruccion+0x1>
 20c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <ProcesarInstruccion>
		Index=0;				//Vuelvo el indice al principio del vector
 210:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
 214:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
	}
}
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_21>:

ISR(ADC_vect) {//when new ADC value ready
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
	/*
	static int oldData=0;
	oldData=pote; //tomo valor antiguo
	pote = ADCH-oldData;//get value from A0	
	*/
	pote=ADCH;
 242:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <pote+0x1>
 24c:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <pote>
	flagPote=1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <flagPote+0x1>
 258:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <flagPote>
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <pwm>:
		actualizar_MEF();
		intensidad();
    }
}

void pwm(int pin,int num){
 26a:	9c 01       	movw	r18, r24
	TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10);//prescalar /1024
 26c:	e1 e8       	ldi	r30, 0x81	; 129
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	90 81       	ld	r25, Z
 272:	9d 60       	ori	r25, 0x0D	; 13
 274:	90 83       	st	Z, r25
	switch(pin){
 276:	27 34       	cpi	r18, 0x47	; 71
 278:	31 05       	cpc	r19, r1
 27a:	f9 f0       	breq	.+62     	; 0x2ba <pwm+0x50>
 27c:	22 35       	cpi	r18, 0x52	; 82
 27e:	31 05       	cpc	r19, r1
 280:	a9 f1       	breq	.+106    	; 0x2ec <pwm+0x82>
 282:	22 34       	cpi	r18, 0x42	; 66
 284:	31 05       	cpc	r19, r1
 286:	e1 f5       	brne	.+120    	; 0x300 <pwm+0x96>
		case 'B':
			if(num<8){
 288:	68 30       	cpi	r22, 0x08	; 8
 28a:	71 05       	cpc	r23, r1
 28c:	64 f4       	brge	.+24     	; 0x2a6 <pwm+0x3c>
				TCCR1A &= ~(1<<COM1A1);
 28e:	e0 e8       	ldi	r30, 0x80	; 128
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	8f 77       	andi	r24, 0x7F	; 127
 296:	80 83       	st	Z, r24
				TCCR1A &= ~(1<<COM1A0);
 298:	80 81       	ld	r24, Z
 29a:	8f 7b       	andi	r24, 0xBF	; 191
 29c:	80 83       	st	Z, r24
				PORTB|= (1<<1);
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	08 95       	ret
			}
			else{
				TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1A0);//fast pwm, inverted
 2a6:	e0 e8       	ldi	r30, 0x80	; 128
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	81 6c       	ori	r24, 0xC1	; 193
 2ae:	80 83       	st	Z, r24
				OCR1A=num;
 2b0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2b4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2b8:	08 95       	ret
			}

		break;
		case 'G':
			if(num<8){
 2ba:	68 30       	cpi	r22, 0x08	; 8
 2bc:	71 05       	cpc	r23, r1
 2be:	64 f4       	brge	.+24     	; 0x2d8 <pwm+0x6e>
				TCCR1A &= ~(1<<COM1B1);
 2c0:	e0 e8       	ldi	r30, 0x80	; 128
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	8f 7d       	andi	r24, 0xDF	; 223
 2c8:	80 83       	st	Z, r24
				TCCR1A &= ~(1<<COM1B0);
 2ca:	80 81       	ld	r24, Z
 2cc:	8f 7e       	andi	r24, 0xEF	; 239
 2ce:	80 83       	st	Z, r24
				PORTB|= (1<<2);
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	84 60       	ori	r24, 0x04	; 4
 2d4:	85 b9       	out	0x05, r24	; 5
 2d6:	08 95       	ret
			}
			else{
				TCCR1A |= (1<<WGM10)|(1<<COM1B1)|(1<<COM1B0);//fast pwm, inverted
 2d8:	e0 e8       	ldi	r30, 0x80	; 128
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	81 63       	ori	r24, 0x31	; 49
 2e0:	80 83       	st	Z, r24
				OCR1B=num;
 2e2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2e6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2ea:	08 95       	ret
			}
		break;
		case 'R':
			PWM_PB5=1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <PWM_PB5+0x1>
 2f4:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <PWM_PB5>
			OCR0_PB5=num;
 2f8:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <OCR0_PB5+0x1>
 2fc:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <OCR0_PB5>
 300:	08 95       	ret

00000302 <iniciar_MEF>:
		break;
	}
}

void iniciar_MEF(){
	estado=S0;
 302:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <estado>
	//PWM manual entre 7 y 248 anda joya (simulador)
	pwm('R',0);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	82 e5       	ldi	r24, 0x52	; 82
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 35 01 	call	0x26a	; 0x26a <pwm>
	pwm('G',0);
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	87 e4       	ldi	r24, 0x47	; 71
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 35 01 	call	0x26a	; 0x26a <pwm>
	pwm('B',0);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	82 e4       	ldi	r24, 0x42	; 66
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 35 01 	call	0x26a	; 0x26a <pwm>
 32a:	08 95       	ret

0000032c <intensidad>:
		case S6: pwm('R',RGB[0]); pwm('G',RGB[1]); pwm('B',RGB[2]); estado=S0;
		break;
	}
}

void intensidad(){
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
	}
	if(ref+RGB[2]>=0 && ref+RGB[2]<=255){
		pwm('B',RGB[2]+ref);	//variacion de la intensidad de B
	}
	*/
	int test = (pote * 100)/(255);
 338:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <pote>
 33c:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <pote+0x1>
 340:	44 e6       	ldi	r20, 0x64	; 100
 342:	42 9f       	mul	r20, r18
 344:	c0 01       	movw	r24, r0
 346:	43 9f       	mul	r20, r19
 348:	90 0d       	add	r25, r0
 34a:	11 24       	eor	r1, r1
 34c:	6f ef       	ldi	r22, 0xFF	; 255
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	0e 94 13 03 	call	0x626	; 0x626 <__divmodhi4>
 354:	fb 01       	movw	r30, r22
	int finalR=(int)(RGB[0]*test/100);
 356:	cc ea       	ldi	r28, 0xAC	; 172
 358:	d1 e0       	ldi	r29, 0x01	; 1
 35a:	28 81       	ld	r18, Y
 35c:	39 81       	ldd	r19, Y+1	; 0x01
 35e:	62 9f       	mul	r22, r18
 360:	c0 01       	movw	r24, r0
 362:	63 9f       	mul	r22, r19
 364:	90 0d       	add	r25, r0
 366:	72 9f       	mul	r23, r18
 368:	90 0d       	add	r25, r0
 36a:	11 24       	eor	r1, r1
 36c:	24 e6       	ldi	r18, 0x64	; 100
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	b9 01       	movw	r22, r18
 372:	0e 94 13 03 	call	0x626	; 0x626 <__divmodhi4>
 376:	7b 01       	movw	r14, r22
	int finalG=(int)(RGB[1]*test/100);
 378:	4a 81       	ldd	r20, Y+2	; 0x02
 37a:	5b 81       	ldd	r21, Y+3	; 0x03
 37c:	e4 9f       	mul	r30, r20
 37e:	c0 01       	movw	r24, r0
 380:	e5 9f       	mul	r30, r21
 382:	90 0d       	add	r25, r0
 384:	f4 9f       	mul	r31, r20
 386:	90 0d       	add	r25, r0
 388:	11 24       	eor	r1, r1
 38a:	b9 01       	movw	r22, r18
 38c:	0e 94 13 03 	call	0x626	; 0x626 <__divmodhi4>
 390:	8b 01       	movw	r16, r22
	int finalB=(int)(RGB[2]*test/100);
 392:	4c 81       	ldd	r20, Y+4	; 0x04
 394:	5d 81       	ldd	r21, Y+5	; 0x05
 396:	e4 9f       	mul	r30, r20
 398:	c0 01       	movw	r24, r0
 39a:	e5 9f       	mul	r30, r21
 39c:	90 0d       	add	r25, r0
 39e:	f4 9f       	mul	r31, r20
 3a0:	90 0d       	add	r25, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 13 03 	call	0x626	; 0x626 <__divmodhi4>
 3aa:	eb 01       	movw	r28, r22
	
	pwm('R',finalR);
 3ac:	b7 01       	movw	r22, r14
 3ae:	82 e5       	ldi	r24, 0x52	; 82
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 35 01 	call	0x26a	; 0x26a <pwm>
	pwm('G',finalG);
 3b6:	b8 01       	movw	r22, r16
 3b8:	87 e4       	ldi	r24, 0x47	; 71
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 35 01 	call	0x26a	; 0x26a <pwm>
	pwm('B',finalB);
 3c0:	be 01       	movw	r22, r28
 3c2:	82 e4       	ldi	r24, 0x42	; 66
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 35 01 	call	0x26a	; 0x26a <pwm>
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <procesarEntrada>:

void procesarEntrada(int *condicion, int cont){
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	7c 01       	movw	r14, r24
 3e6:	eb 01       	movw	r28, r22

	int num = atoi((char *) BufferRX);
 3e8:	87 ed       	ldi	r24, 0xD7	; 215
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 41 03 	call	0x682	; 0x682 <atoi>
 3f0:	8c 01       	movw	r16, r24
	SerialPort_Send_String(BufferRX);
 3f2:	87 ed       	ldi	r24, 0xD7	; 215
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SerialPort_Send_String>
	SerialPort_Send_String("\n\r");
 3fa:	82 e2       	ldi	r24, 0x22	; 34
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SerialPort_Send_String>
	if (num>=0 && num <= 255){    //Verifica el rango valido
 402:	0f 3f       	cpi	r16, 0xFF	; 255
 404:	11 05       	cpc	r17, r1
 406:	09 f0       	breq	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	60 f4       	brcc	.+24     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		RGB[cont] = num;
 40a:	cc 0f       	add	r28, r28
 40c:	dd 1f       	adc	r29, r29
 40e:	c4 55       	subi	r28, 0x54	; 84
 410:	de 4f       	sbci	r29, 0xFE	; 254
 412:	19 83       	std	Y+1, r17	; 0x01
 414:	08 83       	st	Y, r16
		*condicion=true;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	f7 01       	movw	r30, r14
 41c:	91 83       	std	Z+1, r25	; 0x01
 41e:	80 83       	st	Z, r24
 420:	07 c0       	rjmp	.+14     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	}
	else {						//En el caso de que no es ninguno de las opciones validas, devuelve 1
		SerialPort_Send_String("El numero debe estar entre 0 y 255\n\r");
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SerialPort_Send_String>
		*condicion=false;
 42a:	f7 01       	movw	r30, r14
 42c:	11 82       	std	Z+1, r1	; 0x01
 42e:	10 82       	st	Z, r1
	}
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	08 95       	ret

0000043e <actualizar_MEF>:
	pwm('R',0);
	pwm('G',0);
	pwm('B',0);
}

void actualizar_MEF(){
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
	static int condicion;
	switch (estado){
 442:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <estado>
 446:	8e 2f       	mov	r24, r30
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	87 30       	cpi	r24, 0x07	; 7
 44c:	91 05       	cpc	r25, r1
 44e:	08 f0       	brcs	.+2      	; 0x452 <actualizar_MEF+0x14>
 450:	8e c0       	rjmp	.+284    	; 0x56e <actualizar_MEF+0x130>
 452:	fc 01       	movw	r30, r24
 454:	ec 5c       	subi	r30, 0xCC	; 204
 456:	ff 4f       	sbci	r31, 0xFF	; 255
 458:	0c 94 27 03 	jmp	0x64e	; 0x64e <__tablejump2__>
		case S0: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para R:\n\r"); estado=S1;
 45c:	85 e2       	ldi	r24, 0x25	; 37
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SerialPort_Send_String>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <estado>
		break;
 46a:	81 c0       	rjmp	.+258    	; 0x56e <actualizar_MEF+0x130>
		case S1:
			if(ProcesarInstruccion){
 46c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <ProcesarInstruccion>
 470:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <ProcesarInstruccion+0x1>
 474:	89 2b       	or	r24, r25
 476:	09 f4       	brne	.+2      	; 0x47a <actualizar_MEF+0x3c>
 478:	7a c0       	rjmp	.+244    	; 0x56e <actualizar_MEF+0x130>
				procesarEntrada(&condicion,2);
 47a:	62 e0       	ldi	r22, 0x02	; 2
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	84 ea       	ldi	r24, 0xA4	; 164
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <procesarEntrada>
				ProcesarInstruccion=0;
 486:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <ProcesarInstruccion+0x1>
 48a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ProcesarInstruccion>
				if(condicion){
 48e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <condicion.2186>
 492:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <condicion.2186+0x1>
 496:	89 2b       	or	r24, r25
 498:	21 f0       	breq	.+8      	; 0x4a2 <actualizar_MEF+0x64>
					estado=S2;
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <estado>
 4a0:	66 c0       	rjmp	.+204    	; 0x56e <actualizar_MEF+0x130>
				}
				else{
					estado=S0;
 4a2:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <estado>
 4a6:	63 c0       	rjmp	.+198    	; 0x56e <actualizar_MEF+0x130>
				}
			}
		break;
		case S2: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para G:\n\r"); estado=S3;
 4a8:	8e e4       	ldi	r24, 0x4E	; 78
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SerialPort_Send_String>
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <estado>
		break;
 4b6:	5b c0       	rjmp	.+182    	; 0x56e <actualizar_MEF+0x130>
		case S3:
			if(ProcesarInstruccion){
 4b8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <ProcesarInstruccion>
 4bc:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <ProcesarInstruccion+0x1>
 4c0:	89 2b       	or	r24, r25
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <actualizar_MEF+0x88>
 4c4:	54 c0       	rjmp	.+168    	; 0x56e <actualizar_MEF+0x130>
				procesarEntrada(&condicion,1);
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	84 ea       	ldi	r24, 0xA4	; 164
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <procesarEntrada>
				ProcesarInstruccion=0;
 4d2:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <ProcesarInstruccion+0x1>
 4d6:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ProcesarInstruccion>
				if(condicion){
 4da:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <condicion.2186>
 4de:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <condicion.2186+0x1>
 4e2:	89 2b       	or	r24, r25
 4e4:	21 f0       	breq	.+8      	; 0x4ee <actualizar_MEF+0xb0>
					estado=S4;
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <estado>
 4ec:	40 c0       	rjmp	.+128    	; 0x56e <actualizar_MEF+0x130>
				}
				else{
					estado=S2;
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <estado>
 4f4:	3c c0       	rjmp	.+120    	; 0x56e <actualizar_MEF+0x130>
				}
			}
		break;
		case S4: SerialPort_Send_String("Ingrese un valor entre 0 y 255 para B:\n\r"); estado=S5;
 4f6:	87 e7       	ldi	r24, 0x77	; 119
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SerialPort_Send_String>
 4fe:	85 e0       	ldi	r24, 0x05	; 5
 500:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <estado>
		break;
 504:	34 c0       	rjmp	.+104    	; 0x56e <actualizar_MEF+0x130>
		case S5:
			if(ProcesarInstruccion){
 506:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <ProcesarInstruccion>
 50a:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <ProcesarInstruccion+0x1>
 50e:	89 2b       	or	r24, r25
 510:	71 f1       	breq	.+92     	; 0x56e <actualizar_MEF+0x130>
				procesarEntrada(&condicion,0);
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	84 ea       	ldi	r24, 0xA4	; 164
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <procesarEntrada>
				ProcesarInstruccion=0;
 51e:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <ProcesarInstruccion+0x1>
 522:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <ProcesarInstruccion>
				if(condicion){
 526:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <condicion.2186>
 52a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <condicion.2186+0x1>
 52e:	89 2b       	or	r24, r25
 530:	21 f0       	breq	.+8      	; 0x53a <actualizar_MEF+0xfc>
					estado=S6;
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <estado>
 538:	1a c0       	rjmp	.+52     	; 0x56e <actualizar_MEF+0x130>
				}
				else{
					estado=S4;
 53a:	84 e0       	ldi	r24, 0x04	; 4
 53c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <estado>
 540:	16 c0       	rjmp	.+44     	; 0x56e <actualizar_MEF+0x130>
				}
			}
		break;
		case S6: pwm('R',RGB[0]); pwm('G',RGB[1]); pwm('B',RGB[2]); estado=S0;
 542:	cc ea       	ldi	r28, 0xAC	; 172
 544:	d1 e0       	ldi	r29, 0x01	; 1
 546:	68 81       	ld	r22, Y
 548:	79 81       	ldd	r23, Y+1	; 0x01
 54a:	82 e5       	ldi	r24, 0x52	; 82
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 35 01 	call	0x26a	; 0x26a <pwm>
 552:	6a 81       	ldd	r22, Y+2	; 0x02
 554:	7b 81       	ldd	r23, Y+3	; 0x03
 556:	87 e4       	ldi	r24, 0x47	; 71
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 35 01 	call	0x26a	; 0x26a <pwm>
 55e:	6c 81       	ldd	r22, Y+4	; 0x04
 560:	7d 81       	ldd	r23, Y+5	; 0x05
 562:	82 e4       	ldi	r24, 0x42	; 66
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 35 01 	call	0x26a	; 0x26a <pwm>
 56a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <estado>
		break;
	}
}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <main>:
volatile int flagPote=0;
volatile int referencia=0;

int main(void)
{
	setupTimer();
 574:	0e 94 5a 00 	call	0xb4	; 0xb4 <setupTimer>
	setupPines();
 578:	0e 94 66 00 	call	0xcc	; 0xcc <setupPines>
	setupSerialPort(103);
 57c:	87 e6       	ldi	r24, 0x67	; 103
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 0a 03 	call	0x614	; 0x614 <setupSerialPort>
	setupADC();
 584:	0e 94 6a 00 	call	0xd4	; 0xd4 <setupADC>
	sei();
 588:	78 94       	sei
    /* Replace with your application code */
	iniciar_MEF();
 58a:	0e 94 81 01 	call	0x302	; 0x302 <iniciar_MEF>
	while (1) 
    {
		actualizar_MEF();
 58e:	0e 94 1f 02 	call	0x43e	; 0x43e <actualizar_MEF>
		intensidad();
 592:	0e 94 96 01 	call	0x32c	; 0x32c <intensidad>
 596:	fb cf       	rjmp	.-10     	; 0x58e <main+0x1a>

00000598 <SerialPort_Init>:
		 //Inicializa USART
		 UCSR0B = (1<<TXEN0);               // Transmit Enable
		 UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);	//Tamaño de la cantidad de información trasmitida: 110 -> Character Size = 8 
		 UBRR0L = 103;						//baud rate = 9600bps@16MHz
		 while (! (UCSR0A & (1<<UDRE0)));   //wait until UDR0 is empty
}
 598:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 59c:	96 e0       	ldi	r25, 0x06	; 6
 59e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5a6:	08 95       	ret

000005a8 <SerialPort_TX_Enable>:
 5a8:	e1 ec       	ldi	r30, 0xC1	; 193
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	88 60       	ori	r24, 0x08	; 8
 5b0:	80 83       	st	Z, r24
 5b2:	08 95       	ret

000005b4 <SerialPort_RX_Enable>:
 5b4:	e1 ec       	ldi	r30, 0xC1	; 193
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	80 61       	ori	r24, 0x10	; 16
 5bc:	80 83       	st	Z, r24
 5be:	08 95       	ret

000005c0 <SerialPort_RX_Interrupt_Enable>:
 5c0:	e1 ec       	ldi	r30, 0xC1	; 193
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	80 68       	ori	r24, 0x80	; 128
 5c8:	80 83       	st	Z, r24
 5ca:	08 95       	ret

000005cc <SerialPort_Wait_For_TX_Buffer_Free>:
 5cc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5d0:	85 ff       	sbrs	r24, 5
 5d2:	fc cf       	rjmp	.-8      	; 0x5cc <SerialPort_Wait_For_TX_Buffer_Free>
 5d4:	08 95       	ret

000005d6 <SerialPort_Send_Data>:
 5d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5da:	08 95       	ret

000005dc <SerialPort_Send_String>:
 5dc:	ef 92       	push	r14
 5de:	ff 92       	push	r15
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	cf 93       	push	r28
 5e6:	7c 01       	movw	r14, r24
 5e8:	c0 e0       	ldi	r28, 0x00	; 0
 5ea:	07 c0       	rjmp	.+14     	; 0x5fa <SerialPort_Send_String+0x1e>
 5ec:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SerialPort_Wait_For_TX_Buffer_Free>
 5f0:	f8 01       	movw	r30, r16
 5f2:	80 81       	ld	r24, Z
 5f4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SerialPort_Send_Data>
 5f8:	cf 5f       	subi	r28, 0xFF	; 255
 5fa:	87 01       	movw	r16, r14
 5fc:	0c 0f       	add	r16, r28
 5fe:	11 1d       	adc	r17, r1
 600:	f8 01       	movw	r30, r16
 602:	80 81       	ld	r24, Z
 604:	81 11       	cpse	r24, r1
 606:	f2 cf       	rjmp	.-28     	; 0x5ec <SerialPort_Send_String+0x10>
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	ff 90       	pop	r15
 610:	ef 90       	pop	r14
 612:	08 95       	ret

00000614 <setupSerialPort>:
/*
*Configuración de la terminal serie
*/
void setupSerialPort(int cod){
	SerialPort_Init(cod);
 614:	0e 94 cc 02 	call	0x598	; 0x598 <SerialPort_Init>
	SerialPort_TX_Enable();
 618:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 61c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 620:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SerialPort_RX_Interrupt_Enable>
 624:	08 95       	ret

00000626 <__divmodhi4>:
 626:	97 fb       	bst	r25, 7
 628:	07 2e       	mov	r0, r23
 62a:	16 f4       	brtc	.+4      	; 0x630 <__divmodhi4+0xa>
 62c:	00 94       	com	r0
 62e:	07 d0       	rcall	.+14     	; 0x63e <__divmodhi4_neg1>
 630:	77 fd       	sbrc	r23, 7
 632:	09 d0       	rcall	.+18     	; 0x646 <__divmodhi4_neg2>
 634:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodhi4>
 638:	07 fc       	sbrc	r0, 7
 63a:	05 d0       	rcall	.+10     	; 0x646 <__divmodhi4_neg2>
 63c:	3e f4       	brtc	.+14     	; 0x64c <__divmodhi4_exit>

0000063e <__divmodhi4_neg1>:
 63e:	90 95       	com	r25
 640:	81 95       	neg	r24
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <__divmodhi4_neg2>:
 646:	70 95       	com	r23
 648:	61 95       	neg	r22
 64a:	7f 4f       	sbci	r23, 0xFF	; 255

0000064c <__divmodhi4_exit>:
 64c:	08 95       	ret

0000064e <__tablejump2__>:
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	05 90       	lpm	r0, Z+
 654:	f4 91       	lpm	r31, Z
 656:	e0 2d       	mov	r30, r0
 658:	09 94       	ijmp

0000065a <__udivmodhi4>:
 65a:	aa 1b       	sub	r26, r26
 65c:	bb 1b       	sub	r27, r27
 65e:	51 e1       	ldi	r21, 0x11	; 17
 660:	07 c0       	rjmp	.+14     	; 0x670 <__udivmodhi4_ep>

00000662 <__udivmodhi4_loop>:
 662:	aa 1f       	adc	r26, r26
 664:	bb 1f       	adc	r27, r27
 666:	a6 17       	cp	r26, r22
 668:	b7 07       	cpc	r27, r23
 66a:	10 f0       	brcs	.+4      	; 0x670 <__udivmodhi4_ep>
 66c:	a6 1b       	sub	r26, r22
 66e:	b7 0b       	sbc	r27, r23

00000670 <__udivmodhi4_ep>:
 670:	88 1f       	adc	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	5a 95       	dec	r21
 676:	a9 f7       	brne	.-22     	; 0x662 <__udivmodhi4_loop>
 678:	80 95       	com	r24
 67a:	90 95       	com	r25
 67c:	bc 01       	movw	r22, r24
 67e:	cd 01       	movw	r24, r26
 680:	08 95       	ret

00000682 <atoi>:
 682:	fc 01       	movw	r30, r24
 684:	88 27       	eor	r24, r24
 686:	99 27       	eor	r25, r25
 688:	e8 94       	clt
 68a:	21 91       	ld	r18, Z+
 68c:	20 32       	cpi	r18, 0x20	; 32
 68e:	e9 f3       	breq	.-6      	; 0x68a <atoi+0x8>
 690:	29 30       	cpi	r18, 0x09	; 9
 692:	10 f0       	brcs	.+4      	; 0x698 <atoi+0x16>
 694:	2e 30       	cpi	r18, 0x0E	; 14
 696:	c8 f3       	brcs	.-14     	; 0x68a <atoi+0x8>
 698:	2b 32       	cpi	r18, 0x2B	; 43
 69a:	41 f0       	breq	.+16     	; 0x6ac <atoi+0x2a>
 69c:	2d 32       	cpi	r18, 0x2D	; 45
 69e:	39 f4       	brne	.+14     	; 0x6ae <atoi+0x2c>
 6a0:	68 94       	set
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <atoi+0x2a>
 6a4:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulhi_const_10>
 6a8:	82 0f       	add	r24, r18
 6aa:	91 1d       	adc	r25, r1
 6ac:	21 91       	ld	r18, Z+
 6ae:	20 53       	subi	r18, 0x30	; 48
 6b0:	2a 30       	cpi	r18, 0x0A	; 10
 6b2:	c0 f3       	brcs	.-16     	; 0x6a4 <atoi+0x22>
 6b4:	1e f4       	brtc	.+6      	; 0x6bc <atoi+0x3a>
 6b6:	90 95       	com	r25
 6b8:	81 95       	neg	r24
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	08 95       	ret

000006be <__mulhi_const_10>:
 6be:	7a e0       	ldi	r23, 0x0A	; 10
 6c0:	97 9f       	mul	r25, r23
 6c2:	90 2d       	mov	r25, r0
 6c4:	87 9f       	mul	r24, r23
 6c6:	80 2d       	mov	r24, r0
 6c8:	91 0d       	add	r25, r1
 6ca:	11 24       	eor	r1, r1
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
