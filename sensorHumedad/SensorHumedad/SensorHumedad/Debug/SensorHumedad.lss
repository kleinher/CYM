
SensorHumedad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  00000562  000005f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  008001e6  008001e6  000006dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016aa  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7a  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aae  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00003580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b4  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000829  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004889  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3e       	cpi	r26, 0xE6	; 230
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 ee       	ldi	r26, 0xE6	; 230
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 33       	cpi	r26, 0x37	; 55
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  9e:	0c 94 af 02 	jmp	0x55e	; 0x55e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupTimer>:
extern volatile int checkSensorHumidity;
extern volatile int ProcesarInstruccion;
extern char BufferRX[32];

void setupTimer(){
	TCCR0B=(1<<CS02)|(1<<CS00); //configurar el registro del timer0 como temporizador con prescalador de 1024
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	85 bd       	out	0x25, r24	; 37
	TCNT0=99;					//el registro empieza con valor 99
  aa:	83 e6       	ldi	r24, 0x63	; 99
  ac:	86 bd       	out	0x26, r24	; 38
	TIMSK0|= (1<<TOIE0);	    //habilita la interrupcion por desbordamiento del timer0
  ae:	ee e6       	ldi	r30, 0x6E	; 110
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24
	sei();				        //habilita interrupciones globales
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
	uint8_t static cont=0;
	cont++;
  ca:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <cont.1655>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <cont.1655>
	TCNT0=99;//reinicio contador del timer0
  d4:	83 e6       	ldi	r24, 0x63	; 99
  d6:	86 bd       	out	0x26, r24	; 38
	if(cont==100){
  d8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <cont.1655>
  dc:	84 36       	cpi	r24, 0x64	; 100
  de:	41 f4       	brne	.+16     	; 0xf0 <__vector_16+0x34>
		checkSensorHumidity = true;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <checkSensorHumidity+0x1>
  e8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <checkSensorHumidity>
		cont=0;//reinicio contador
  ec:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <cont.1655>
	}
	
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_18>:

ISR(USART_RX_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	volatile char RX_Data = 0;
 11e:	19 82       	std	Y+1, r1	; 0x01
	static short int Index=0;
	
	RX_Data = UDR0;
 120:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 124:	89 83       	std	Y+1, r24	; 0x01
	if(RX_Data != '\r'){
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8d 30       	cpi	r24, 0x0D	; 13
 12a:	89 f0       	breq	.+34     	; 0x14e <__vector_18+0x50>
		BufferRX[Index++] = RX_Data;
 12c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__data_end>
 130:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <__data_end+0x1>
 134:	9c 01       	movw	r18, r24
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	30 93 e7 01 	sts	0x01E7, r19	; 0x8001e7 <__data_end+0x1>
 13e:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <__data_end>
 142:	29 81       	ldd	r18, Y+1	; 0x01
 144:	fc 01       	movw	r30, r24
 146:	e0 5f       	subi	r30, 0xF0	; 240
 148:	fd 4f       	sbci	r31, 0xFD	; 253
 14a:	20 83       	st	Z, r18
 14c:	11 c0       	rjmp	.+34     	; 0x170 <__vector_18+0x72>
	}
	else{
		BufferRX[Index]='\0';
 14e:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <__data_end>
 152:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <__data_end+0x1>
 156:	e0 5f       	subi	r30, 0xF0	; 240
 158:	fd 4f       	sbci	r31, 0xFD	; 253
 15a:	10 82       	st	Z, r1
		ProcesarInstruccion = true;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <ProcesarInstruccion+0x1>
 164:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <ProcesarInstruccion>
		Index=0;
 168:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <__data_end+0x1>
 16c:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
	}
	
 170:	0f 90       	pop	r0
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <procesarEntrada>:
		}
	}

}
void procesarEntrada(){
	if(strcmp((char *) BufferRX,"ON") ==0){
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	71 e0       	ldi	r23, 0x01	; 1
 190:	80 e1       	ldi	r24, 0x10	; 16
 192:	92 e0       	ldi	r25, 0x02	; 2
 194:	0e 94 71 02 	call	0x4e2	; 0x4e2 <strcmp>
 198:	89 2b       	or	r24, r25
 19a:	39 f4       	brne	.+14     	; 0x1aa <procesarEntrada+0x1e>
		ON = true;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <ON+0x1>
 1a4:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <ON>
 1a8:	08 95       	ret
	}
	else if(strcmp((char *) BufferRX,"OFF") ==0){
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	80 e1       	ldi	r24, 0x10	; 16
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <strcmp>
 1b6:	89 2b       	or	r24, r25
 1b8:	29 f4       	brne	.+10     	; 0x1c4 <procesarEntrada+0x38>
		ON = false;
 1ba:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <ON+0x1>
 1be:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <ON>
 1c2:	08 95       	ret
	}
	else if(strcmp((char *) BufferRX,"RST") ==0){
 1c4:	67 e0       	ldi	r22, 0x07	; 7
 1c6:	71 e0       	ldi	r23, 0x01	; 1
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <strcmp>
 1d0:	89 2b       	or	r24, r25
 1d2:	39 f4       	brne	.+14     	; 0x1e2 <procesarEntrada+0x56>
		RST = true;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <RST+0x1>
 1dc:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <RST>
 1e0:	08 95       	ret
	}
	else {
		sprintf((char *) BufferTX,"%s","Comando no valido\n\r");
 1e2:	84 e1       	ldi	r24, 0x14	; 20
 1e4:	eb e0       	ldi	r30, 0x0B	; 11
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	ae ee       	ldi	r26, 0xEE	; 238
 1ea:	b1 e0       	ldi	r27, 0x01	; 1
 1ec:	01 90       	ld	r0, Z+
 1ee:	0d 92       	st	X+, r0
 1f0:	8a 95       	dec	r24
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <procesarEntrada+0x60>
		SerialPort_Send_String(BufferTX);
 1f4:	8e ee       	ldi	r24, 0xEE	; 238
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
 1fc:	08 95       	ret

000001fe <main>:
  char BufferTX[32];
  int ON = false;
  int RST = false;
int main(void)
{
	checkSensorHumidity = true;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <checkSensorHumidity+0x1>
 206:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <checkSensorHumidity>
	setupTimer();
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <setupTimer>
	SerialPort_Init(103);
 20e:	87 e6       	ldi	r24, 0x67	; 103
 210:	0e 94 22 02 	call	0x444	; 0x444 <SerialPort_Init>
	SerialPort_TX_Enable();
 214:	0e 94 2a 02 	call	0x454	; 0x454 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 218:	0e 94 30 02 	call	0x460	; 0x460 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 21c:	0e 94 36 02 	call	0x46c	; 0x46c <SerialPort_RX_Interrupt_Enable>
	sei();
 220:	78 94       	sei
	displayMenu();
 222:	0e 94 60 02 	call	0x4c0	; 0x4c0 <displayMenu>
	while(1)
	{
		
		if(RST){
 226:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <RST>
 22a:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <RST+0x1>
 22e:	89 2b       	or	r24, r25
 230:	51 f0       	breq	.+20     	; 0x246 <main+0x48>
			RST = false;
 232:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <RST+0x1>
 236:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <RST>
			ON = false;
 23a:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <ON+0x1>
 23e:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <ON>
			displayMenu();
 242:	0e 94 60 02 	call	0x4c0	; 0x4c0 <displayMenu>
		}
		if(ProcesarInstruccion){
 246:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <ProcesarInstruccion>
 24a:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <ProcesarInstruccion+0x1>
 24e:	89 2b       	or	r24, r25
 250:	31 f0       	breq	.+12     	; 0x25e <main+0x60>
			ProcesarInstruccion = false;
 252:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <ProcesarInstruccion+0x1>
 256:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <ProcesarInstruccion>
			procesarEntrada();
 25a:	0e 94 c6 00 	call	0x18c	; 0x18c <procesarEntrada>
			
		}
		if(checkSensorHumidity && ON){
 25e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <checkSensorHumidity>
 262:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <checkSensorHumidity+0x1>
 266:	89 2b       	or	r24, r25
 268:	f1 f2       	breq	.-68     	; 0x226 <main+0x28>
 26a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <ON>
 26e:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <ON+0x1>
 272:	89 2b       	or	r24, r25
 274:	c1 f2       	breq	.-80     	; 0x226 <main+0x28>
			updateHumidity();
 276:	0e 94 8e 01 	call	0x31c	; 0x31c <updateHumidity>
			checkSensorHumidity = false;
 27a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <checkSensorHumidity+0x1>
 27e:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <checkSensorHumidity>
 282:	d1 cf       	rjmp	.-94     	; 0x226 <main+0x28>

00000284 <Request>:
 uint8_t I_RH,D_RH,I_Temp,D_Temp,CheckSum;
 uint8_t c=0;

void Request()				/* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT11_PIN);
 284:	8a b1       	in	r24, 0x0a	; 10
 286:	80 64       	ori	r24, 0x40	; 64
 288:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	89 ef       	ldi	r24, 0xF9	; 249
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <Request+0xc>
 298:	00 c0       	rjmp	.+0      	; 0x29a <Request+0x16>
 29a:	00 00       	nop
	_delay_ms(20);	
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
 29c:	8b b1       	in	r24, 0x0b	; 11
 29e:	8f 7b       	andi	r24, 0xBF	; 191
 2a0:	8b b9       	out	0x0b, r24	; 11
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	89 ef       	ldi	r24, 0xF9	; 249
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <Request+0x24>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <Request+0x2e>
 2b2:	00 00       	nop
	_delay_ms(20);			/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	80 64       	ori	r24, 0x40	; 64
 2b8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	25 ed       	ldi	r18, 0xD5	; 213
 2bc:	2a 95       	dec	r18
 2be:	f1 f7       	brne	.-4      	; 0x2bc <Request+0x38>
 2c0:	00 00       	nop
 2c2:	08 95       	ret

000002c4 <Response>:
	_delay_us(40);	
}

void Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
 2c4:	8a b1       	in	r24, 0x0a	; 10
 2c6:	8f 7b       	andi	r24, 0xBF	; 191
 2c8:	8a b9       	out	0x0a, r24	; 10
	while(PIND & (1<<DHT11_PIN));//Limpia el 1 de la salida nuestra
 2ca:	4e 99       	sbic	0x09, 6	; 9
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <Response+0x6>
	
	while((PIND & (1<<DHT11_PIN))==0); //limpia el 1 del sensor
 2ce:	4e 9b       	sbis	0x09, 6	; 9
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <Response+0xa>
	
	while(PIND & (1<<DHT11_PIN));//limpia el 0 del sensor
 2d2:	4e 99       	sbic	0x09, 6	; 9
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <Response+0xe>
}
 2d6:	08 95       	ret

000002d8 <Receive_data>:

uint8_t Receive_data()			/* receive data */
{	
	for (int q=0; q<8; q++)
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	19 c0       	rjmp	.+50     	; 0x310 <Receive_data+0x38>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
 2de:	4e 9b       	sbis	0x09, 6	; 9
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <Receive_data+0x6>
 2e2:	80 ea       	ldi	r24, 0xA0	; 160
 2e4:	8a 95       	dec	r24
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <Receive_data+0xc>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
 2e8:	4e 9b       	sbis	0x09, 6	; 9
 2ea:	09 c0       	rjmp	.+18     	; 0x2fe <Receive_data+0x26>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
 2ec:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <c>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <c>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <Receive_data+0x30>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 2fe:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <c>
 302:	88 0f       	add	r24, r24
 304:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <c>
		while(PIND & (1<<DHT11_PIN));
 308:	4e 99       	sbic	0x09, 6	; 9
 30a:	fe cf       	rjmp	.-4      	; 0x308 <Receive_data+0x30>
	while(PIND & (1<<DHT11_PIN));//limpia el 0 del sensor
}

uint8_t Receive_data()			/* receive data */
{	
	for (int q=0; q<8; q++)
 30c:	2f 5f       	subi	r18, 0xFF	; 255
 30e:	3f 4f       	sbci	r19, 0xFF	; 255
 310:	28 30       	cpi	r18, 0x08	; 8
 312:	31 05       	cpc	r19, r1
 314:	24 f3       	brlt	.-56     	; 0x2de <Receive_data+0x6>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
 316:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <c>
 31a:	08 95       	ret

0000031c <updateHumidity>:

void updateHumidity(){
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	00 d0       	rcall	.+0      	; 0x322 <updateHumidity+0x6>
 322:	00 d0       	rcall	.+0      	; 0x324 <updateHumidity+0x8>
 324:	1f 92       	push	r1
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
	char data[5];
	
	 Request();
 32a:	0e 94 42 01 	call	0x284	; 0x284 <Request>
	 /* Microcontroller send start pulse/request */
	 Response();		// receive response
 32e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Response>
	 I_RH=Receive_data();	// store first eight bit in I_RH
 332:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Receive_data>
 336:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <I_RH>
	 D_RH=Receive_data();	// store next eight bit in D_RH
 33a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Receive_data>
 33e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <D_RH>
	 I_Temp=Receive_data();	// store next eight bit in I_Temp
 342:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Receive_data>
 346:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <I_Temp>
	 D_Temp=Receive_data();	// store next eight bit in D_Temp
 34a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Receive_data>
 34e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <D_Temp>
	 CheckSum=Receive_data();// store next eight bit in CheckSum
 352:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Receive_data>
 356:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <CheckSum>
	 
	 if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 35a:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <I_RH>
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <D_RH>
 364:	9f 01       	movw	r18, r30
 366:	29 0f       	add	r18, r25
 368:	31 1d       	adc	r19, r1
 36a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <I_Temp>
 36e:	29 0f       	add	r18, r25
 370:	31 1d       	adc	r19, r1
 372:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <D_Temp>
 376:	29 0f       	add	r18, r25
 378:	31 1d       	adc	r19, r1
 37a:	48 2f       	mov	r20, r24
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	24 17       	cp	r18, r20
 380:	35 07       	cpc	r19, r21
 382:	29 f0       	breq	.+10     	; 0x38e <updateHumidity+0x72>
	 {
		 SerialPort_Send_String("ERROR EN EL SENSOR DE HUMEDAD!!!!");
 384:	8f e1       	ldi	r24, 0x1F	; 31
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
 38c:	53 c0       	rjmp	.+166    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 38e:	4a e0       	ldi	r20, 0x0A	; 10
 390:	be 01       	movw	r22, r28
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	cf 01       	movw	r24, r30
 398:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__itoa_ncheck>
	 }
	 else
	 {
		 itoa(I_RH,data,10);
		 SerialPort_Send_String("Humedad: ");
 39c:	81 e4       	ldi	r24, 0x41	; 65
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 SerialPort_Send_String(data);
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 SerialPort_Send_String(".");
 3ac:	8b e4       	ldi	r24, 0x4B	; 75
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 itoa(D_RH,data,10);
 3b4:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <D_RH>
 3b8:	4a e0       	ldi	r20, 0x0A	; 10
 3ba:	be 01       	movw	r22, r28
 3bc:	6f 5f       	subi	r22, 0xFF	; 255
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__itoa_ncheck>
		 SerialPort_Send_String(data);
 3c6:	ce 01       	movw	r24, r28
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 SerialPort_Send_String("\r\n");
 3ce:	8d e4       	ldi	r24, 0x4D	; 77
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 SerialPort_Send_String("Temperatura: ");
 3d6:	80 e5       	ldi	r24, 0x50	; 80
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 itoa(I_Temp,data,10);
 3de:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <I_Temp>
 3e2:	4a e0       	ldi	r20, 0x0A	; 10
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__itoa_ncheck>
		 SerialPort_Send_String(data);
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 SerialPort_Send_String(".");
 3f8:	8b e4       	ldi	r24, 0x4B	; 75
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 itoa(D_Temp,data,10);
 400:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <D_Temp>
 404:	4a e0       	ldi	r20, 0x0A	; 10
 406:	be 01       	movw	r22, r28
 408:	6f 5f       	subi	r22, 0xFF	; 255
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__itoa_ncheck>
		 SerialPort_Send_String(data);
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 SerialPort_Send_String("\r\n");
 41a:	8d e4       	ldi	r24, 0x4D	; 77
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 itoa(CheckSum,data,10);
 422:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <CheckSum>
 426:	4a e0       	ldi	r20, 0x0A	; 10
 428:	be 01       	movw	r22, r28
 42a:	6f 5f       	subi	r22, 0xFF	; 255
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__itoa_ncheck>
	
	 }
	 }
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <SerialPort_Init>:
	if ( (UCSR0A & (1<<RXC0))==1) {
		*dato=UDR0;
		return 1;
	}
	return 0; //no data
}
 444:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 448:	96 e0       	ldi	r25, 0x06	; 6
 44a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 44e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 452:	08 95       	ret

00000454 <SerialPort_TX_Enable>:
 454:	e1 ec       	ldi	r30, 0xC1	; 193
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	88 60       	ori	r24, 0x08	; 8
 45c:	80 83       	st	Z, r24
 45e:	08 95       	ret

00000460 <SerialPort_RX_Enable>:
 460:	e1 ec       	ldi	r30, 0xC1	; 193
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	80 61       	ori	r24, 0x10	; 16
 468:	80 83       	st	Z, r24
 46a:	08 95       	ret

0000046c <SerialPort_RX_Interrupt_Enable>:
 46c:	e1 ec       	ldi	r30, 0xC1	; 193
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	80 68       	ori	r24, 0x80	; 128
 474:	80 83       	st	Z, r24
 476:	08 95       	ret

00000478 <SerialPort_Wait_For_TX_Buffer_Free>:
 478:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 47c:	85 ff       	sbrs	r24, 5
 47e:	fc cf       	rjmp	.-8      	; 0x478 <SerialPort_Wait_For_TX_Buffer_Free>
 480:	08 95       	ret

00000482 <SerialPort_Send_Data>:
 482:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 486:	08 95       	ret

00000488 <SerialPort_Send_String>:
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	7c 01       	movw	r14, r24
 494:	c0 e0       	ldi	r28, 0x00	; 0
 496:	07 c0       	rjmp	.+14     	; 0x4a6 <SerialPort_Send_String+0x1e>
 498:	0e 94 3c 02 	call	0x478	; 0x478 <SerialPort_Wait_For_TX_Buffer_Free>
 49c:	f8 01       	movw	r30, r16
 49e:	80 81       	ld	r24, Z
 4a0:	0e 94 41 02 	call	0x482	; 0x482 <SerialPort_Send_Data>
 4a4:	cf 5f       	subi	r28, 0xFF	; 255
 4a6:	87 01       	movw	r16, r14
 4a8:	0c 0f       	add	r16, r28
 4aa:	11 1d       	adc	r17, r1
 4ac:	f8 01       	movw	r30, r16
 4ae:	80 81       	ld	r24, Z
 4b0:	81 11       	cpse	r24, r1
 4b2:	f2 cf       	rjmp	.-28     	; 0x498 <SerialPort_Send_String+0x10>
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	08 95       	ret

000004c0 <displayMenu>:



void displayMenu(){
		 SerialPort_Send_String("Menu \n\r");
 4c0:	8e e5       	ldi	r24, 0x5E	; 94
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 SerialPort_Send_String("1. 'ON'<Enter>  - encender registrador \n\r");
 4c8:	86 e6       	ldi	r24, 0x66	; 102
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 SerialPort_Send_String("2. 'OFF'<Enter> - apagar registrador \n\r");
 4d0:	80 e9       	ldi	r24, 0x90	; 144
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
		 SerialPort_Send_String("3. 'RST'<Enter> - Volver al estado inicial \n\r");
 4d8:	88 eb       	ldi	r24, 0xB8	; 184
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 44 02 	call	0x488	; 0x488 <SerialPort_Send_String>
 4e0:	08 95       	ret

000004e2 <strcmp>:
 4e2:	fb 01       	movw	r30, r22
 4e4:	dc 01       	movw	r26, r24
 4e6:	8d 91       	ld	r24, X+
 4e8:	01 90       	ld	r0, Z+
 4ea:	80 19       	sub	r24, r0
 4ec:	01 10       	cpse	r0, r1
 4ee:	d9 f3       	breq	.-10     	; 0x4e6 <strcmp+0x4>
 4f0:	99 0b       	sbc	r25, r25
 4f2:	08 95       	ret

000004f4 <__itoa_ncheck>:
 4f4:	bb 27       	eor	r27, r27
 4f6:	4a 30       	cpi	r20, 0x0A	; 10
 4f8:	31 f4       	brne	.+12     	; 0x506 <__itoa_ncheck+0x12>
 4fa:	99 23       	and	r25, r25
 4fc:	22 f4       	brpl	.+8      	; 0x506 <__itoa_ncheck+0x12>
 4fe:	bd e2       	ldi	r27, 0x2D	; 45
 500:	90 95       	com	r25
 502:	81 95       	neg	r24
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	0c 94 86 02 	jmp	0x50c	; 0x50c <__utoa_common>

0000050a <__utoa_ncheck>:
 50a:	bb 27       	eor	r27, r27

0000050c <__utoa_common>:
 50c:	fb 01       	movw	r30, r22
 50e:	55 27       	eor	r21, r21
 510:	aa 27       	eor	r26, r26
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	aa 1f       	adc	r26, r26
 518:	a4 17       	cp	r26, r20
 51a:	10 f0       	brcs	.+4      	; 0x520 <__utoa_common+0x14>
 51c:	a4 1b       	sub	r26, r20
 51e:	83 95       	inc	r24
 520:	50 51       	subi	r21, 0x10	; 16
 522:	b9 f7       	brne	.-18     	; 0x512 <__utoa_common+0x6>
 524:	a0 5d       	subi	r26, 0xD0	; 208
 526:	aa 33       	cpi	r26, 0x3A	; 58
 528:	08 f0       	brcs	.+2      	; 0x52c <__utoa_common+0x20>
 52a:	a9 5d       	subi	r26, 0xD9	; 217
 52c:	a1 93       	st	Z+, r26
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	79 f7       	brne	.-34     	; 0x510 <__utoa_common+0x4>
 532:	b1 11       	cpse	r27, r1
 534:	b1 93       	st	Z+, r27
 536:	11 92       	st	Z+, r1
 538:	cb 01       	movw	r24, r22
 53a:	0c 94 9f 02 	jmp	0x53e	; 0x53e <strrev>

0000053e <strrev>:
 53e:	dc 01       	movw	r26, r24
 540:	fc 01       	movw	r30, r24
 542:	67 2f       	mov	r22, r23
 544:	71 91       	ld	r23, Z+
 546:	77 23       	and	r23, r23
 548:	e1 f7       	brne	.-8      	; 0x542 <strrev+0x4>
 54a:	32 97       	sbiw	r30, 0x02	; 2
 54c:	04 c0       	rjmp	.+8      	; 0x556 <strrev+0x18>
 54e:	7c 91       	ld	r23, X
 550:	6d 93       	st	X+, r22
 552:	70 83       	st	Z, r23
 554:	62 91       	ld	r22, -Z
 556:	ae 17       	cp	r26, r30
 558:	bf 07       	cpc	r27, r31
 55a:	c8 f3       	brcs	.-14     	; 0x54e <strrev+0x10>
 55c:	08 95       	ret

0000055e <_exit>:
 55e:	f8 94       	cli

00000560 <__stop_program>:
 560:	ff cf       	rjmp	.-2      	; 0x560 <__stop_program>
