
SensorHumedad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  00000550  000005e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000550  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  008001e6  008001e6  000006ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001634  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7b  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab9  00000000  00000000  00002a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00003504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bf  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000807  00000000  00000000  00003fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000047f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3e       	cpi	r26, 0xE6	; 230
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 ee       	ldi	r26, 0xE6	; 230
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 33       	cpi	r26, 0x37	; 55
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  9e:	0c 94 a6 02 	jmp	0x54c	; 0x54c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupTimer>:
extern volatile int checkSensorHumidity;
extern volatile int ProcesarInstruccion;
extern char BufferRX[32];
/*Configuración del timer 0*/
void setupTimer(){
	TCCR0B=(1<<CS02)|(1<<CS00); //configurar el registro del timer0 como temporizador con prescalador de 1024
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	85 bd       	out	0x25, r24	; 37
	TCNT0=99;					//el registro empieza con valor 99
  aa:	83 e6       	ldi	r24, 0x63	; 99
  ac:	86 bd       	out	0x26, r24	; 38
	TIMSK0|= (1<<TOIE0);	    //habilita la interrupcion por desbordamiento del timer0
  ae:	ee e6       	ldi	r30, 0x6E	; 110
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24
	sei();				        //habilita interrupciones globales
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <__vector_16>:
}
/*
*Rutina de atención de interrupción Timer
*/
ISR(TIMER0_OVF_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
	uint8_t static cont=0;
	cont++;					//Contador para llegar a interrupciones cada 1 seg
  ca:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <cont.1657>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <cont.1657>
	TCNT0=99;				//Reinicio contador del timer0
  d4:	83 e6       	ldi	r24, 0x63	; 99
  d6:	86 bd       	out	0x26, r24	; 38
	if(cont==100){			//Condición de tiempo requerida (1 seg)
  d8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <cont.1657>
  dc:	84 36       	cpi	r24, 0x64	; 100
  de:	41 f4       	brne	.+16     	; 0xf0 <__vector_16+0x34>
		checkSensorHumidity = true; //Flag 
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <checkSensorHumidity+0x1>
  e8:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <checkSensorHumidity>
		cont=0;				//reinicio contador
  ec:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <cont.1657>
	}
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_18>:
/*
*Rutina de atención de interrupción Terminal serie
*/
ISR(USART_RX_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	volatile char RX_Data = 0;  
 11e:	19 82       	std	Y+1, r1	; 0x01
	static short int Index=0;	
	
	RX_Data = UDR0;				//Obtengo la información del terminal
 120:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 124:	89 83       	std	Y+1, r24	; 0x01
	if(RX_Data != '\r'){		//si no es un salto de linea entonces almaceno caracter en el buffer
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8d 30       	cpi	r24, 0x0D	; 13
 12a:	89 f0       	breq	.+34     	; 0x14e <__vector_18+0x50>
		BufferRX[Index++] = RX_Data;
 12c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__data_end>
 130:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <__data_end+0x1>
 134:	9c 01       	movw	r18, r24
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	30 93 e7 01 	sts	0x01E7, r19	; 0x8001e7 <__data_end+0x1>
 13e:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <__data_end>
 142:	29 81       	ldd	r18, Y+1	; 0x01
 144:	fc 01       	movw	r30, r24
 146:	eb 5e       	subi	r30, 0xEB	; 235
 148:	fd 4f       	sbci	r31, 0xFD	; 253
 14a:	20 83       	st	Z, r18
 14c:	11 c0       	rjmp	.+34     	; 0x170 <__vector_18+0x72>
	}
	else{						//Si es un salto de linea entonces 
		BufferRX[Index]='\0';	//Determino el final del string
 14e:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <__data_end>
 152:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <__data_end+0x1>
 156:	eb 5e       	subi	r30, 0xEB	; 235
 158:	fd 4f       	sbci	r31, 0xFD	; 253
 15a:	10 82       	st	Z, r1
		ProcesarInstruccion = true; //Activo flag para atención de instrucción
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <ProcesarInstruccion+0x1>
 164:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <ProcesarInstruccion>
		Index=0;				//Vuelvo el indice al principio del vector
 168:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <__data_end+0x1>
 16c:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
	}
 170:	0f 90       	pop	r0
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <main>:
char BufferTX[32];
int ON = false;
int RST = false;
int main(void)
{
	setupTimer();
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <setupTimer>
	setupSerialPort(103);
 190:	87 e6       	ldi	r24, 0x67	; 103
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 5f 02 	call	0x4be	; 0x4be <setupSerialPort>
	displayMenu(); //Rutina que imprime el menu en la terminal serie
 198:	0e 94 4e 02 	call	0x49c	; 0x49c <displayMenu>
	while(1)
	{
		if(RST){			// Lógica de reset
 19c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <RST>
 1a0:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <RST+0x1>
 1a4:	89 2b       	or	r24, r25
 1a6:	51 f0       	breq	.+20     	; 0x1bc <main+0x30>
			RST = false;
 1a8:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <RST+0x1>
 1ac:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <RST>
			ON = false;
 1b0:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <ON+0x1>
 1b4:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <ON>
			displayMenu();
 1b8:	0e 94 4e 02 	call	0x49c	; 0x49c <displayMenu>
		}
		if(ProcesarInstruccion){ //Lógica de proceso de comando del usuario
 1bc:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <ProcesarInstruccion>
 1c0:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <ProcesarInstruccion+0x1>
 1c4:	89 2b       	or	r24, r25
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <main+0x48>
			ProcesarInstruccion = false;
 1c8:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <ProcesarInstruccion+0x1>
 1cc:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <ProcesarInstruccion>
			procesarEntrada();
 1d0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <procesarEntrada>
			
		}
		if(checkSensorHumidity && ON){ //Lógica de registro de temperatura/humedad
 1d4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <checkSensorHumidity>
 1d8:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <checkSensorHumidity+0x1>
 1dc:	89 2b       	or	r24, r25
 1de:	f1 f2       	breq	.-68     	; 0x19c <main+0x10>
 1e0:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <ON>
 1e4:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <ON+0x1>
 1e8:	89 2b       	or	r24, r25
 1ea:	c1 f2       	breq	.-80     	; 0x19c <main+0x10>
			updateHumidity();
 1ec:	0e 94 40 01 	call	0x280	; 0x280 <updateHumidity>
			checkSensorHumidity = false;
 1f0:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <checkSensorHumidity+0x1>
 1f4:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <checkSensorHumidity>
 1f8:	d1 cf       	rjmp	.-94     	; 0x19c <main+0x10>

000001fa <Request>:
extern char BufferTX[32];

/*Señal del MCU para el sensor de humedad */
void Request()				
{
	DDRC |= (1<<DHT11_PIN);		// seteo el pin como salida
 1fa:	87 b1       	in	r24, 0x07	; 7
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<DHT11_PIN);	// Pone en 0 la salida del pin
 200:	88 b1       	in	r24, 0x08	; 8
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	2f e7       	ldi	r18, 0x7F	; 127
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <Request+0x12>
 214:	00 c0       	rjmp	.+0      	; 0x216 <Request+0x1c>
 216:	00 00       	nop
	_delay_ms(25);				// mantiene la salida en 1 por el tiempo necesario para el sensor
	PORTC |= (1<<DHT11_PIN);	// Pone en 1 la salida del pin
 218:	88 b1       	in	r24, 0x08	; 8
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	25 ed       	ldi	r18, 0xD5	; 213
 220:	2a 95       	dec	r18
 222:	f1 f7       	brne	.-4      	; 0x220 <Request+0x26>
 224:	00 00       	nop
 226:	08 95       	ret

00000228 <Response>:
	_delay_us(40);				// Mantiene la salida en 1 por el tiempo necesario para el sensor 
}
/* Captura de respuesta del sensor de humedad */
void Response()				
{
	DDRC &= ~(1<<DHT11_PIN);		   //Seteo el pin como entrada
 228:	87 b1       	in	r24, 0x07	; 7
 22a:	8e 7f       	andi	r24, 0xFE	; 254
 22c:	87 b9       	out	0x07, r24	; 7
	while(PINC & (1<<DHT11_PIN));      //Captura el 1 del pin de entrada
 22e:	30 99       	sbic	0x06, 0	; 6
 230:	fe cf       	rjmp	.-4      	; 0x22e <Response+0x6>
	while((PINC & (1<<DHT11_PIN))==0); //Captura el 0 del pin de entrada que envía el sensor
 232:	30 9b       	sbis	0x06, 0	; 6
 234:	fe cf       	rjmp	.-4      	; 0x232 <Response+0xa>
	while(PINC & (1<<DHT11_PIN));	   //Captura el 1 del pin de entrada que envía el sensor
 236:	30 99       	sbic	0x06, 0	; 6
 238:	fe cf       	rjmp	.-4      	; 0x236 <Response+0xe>
}
 23a:	08 95       	ret

0000023c <Receive_data>:
/* Recepción de información */
uint8_t Receive_data()			
{	
	for (int q=0; q<8; q++)
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	19 c0       	rjmp	.+50     	; 0x274 <Receive_data+0x38>
	{
		while((PINC & (1<<DHT11_PIN)) == 0);  //Espero a recibir 1
 242:	30 9b       	sbis	0x06, 0	; 6
 244:	fe cf       	rjmp	.-4      	; 0x242 <Receive_data+0x6>
 246:	80 ea       	ldi	r24, 0xA0	; 160
 248:	8a 95       	dec	r24
 24a:	f1 f7       	brne	.-4      	; 0x248 <Receive_data+0xc>
		_delay_us(30);						  //Espero 30us
		if(PINC & (1<<DHT11_PIN))			//En el caso que el terminal siga en 1
 24c:	30 9b       	sbis	0x06, 0	; 6
 24e:	09 c0       	rjmp	.+18     	; 0x262 <Receive_data+0x26>
			c = (c<<1)|(0x01);				//Entonces la información es 1 
 250:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <c>
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <c>
 260:	05 c0       	rjmp	.+10     	; 0x26c <Receive_data+0x30>
		else								//En el caso que tengo un 0 en el terminal
			c = (c<<1);						//Entonces la información es 0
 262:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <c>
 266:	88 0f       	add	r24, r24
 268:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <c>
		while(PINC & (1<<DHT11_PIN));		//Espero que la salida del terminal vuelva a ser 0 
 26c:	30 99       	sbic	0x06, 0	; 6
 26e:	fe cf       	rjmp	.-4      	; 0x26c <Receive_data+0x30>
	while(PINC & (1<<DHT11_PIN));	   //Captura el 1 del pin de entrada que envía el sensor
}
/* Recepción de información */
uint8_t Receive_data()			
{	
	for (int q=0; q<8; q++)
 270:	2f 5f       	subi	r18, 0xFF	; 255
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	28 30       	cpi	r18, 0x08	; 8
 276:	31 05       	cpc	r19, r1
 278:	24 f3       	brlt	.-56     	; 0x242 <Receive_data+0x6>
		else								//En el caso que tengo un 0 en el terminal
			c = (c<<1);						//Entonces la información es 0
		while(PINC & (1<<DHT11_PIN));		//Espero que la salida del terminal vuelva a ser 0 
	}
	return c;
}
 27a:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <c>
 27e:	08 95       	ret

00000280 <updateHumidity>:
/*
*Actualización de los valores de humedad recibidos por el sensor
*/
void updateHumidity(){
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 d0       	rcall	.+0      	; 0x286 <updateHumidity+0x6>
 286:	00 d0       	rcall	.+0      	; 0x288 <updateHumidity+0x8>
 288:	1f 92       	push	r1
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
	char data[5];
	cli();					//Desactivo interrupciones para evitar perder información del sensor
 28e:	f8 94       	cli
	Request();				//Aviso al sensor que quiero recibir información
 290:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Request>
	Response();				//Capturo la respuesta del sensor
 294:	0e 94 14 01 	call	0x228	; 0x228 <Response>
	I_RH=Receive_data();	// Almaceno los primeros 8 bits de humedad
 298:	0e 94 1e 01 	call	0x23c	; 0x23c <Receive_data>
 29c:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <I_RH>
	D_RH=Receive_data();	// Almaceno los segundos 8 bits de humedad
 2a0:	0e 94 1e 01 	call	0x23c	; 0x23c <Receive_data>
 2a4:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <D_RH>
	I_Temp=Receive_data();	// Almaceno los primeros 8 bits de temperatura
 2a8:	0e 94 1e 01 	call	0x23c	; 0x23c <Receive_data>
 2ac:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <I_Temp>
	D_Temp=Receive_data();	// Almaceno los segundos 8 bits de temperatura
 2b0:	0e 94 1e 01 	call	0x23c	; 0x23c <Receive_data>
 2b4:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <D_Temp>
	CheckSum=Receive_data();// Alamaceno los 8 bits de checksum
 2b8:	0e 94 1e 01 	call	0x23c	; 0x23c <Receive_data>
 2bc:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <CheckSum>
	sei();					//Vuelvo a activar interrupciónes luego de procesar toda la información del sensor
 2c0:	78 94       	sei
	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)		//Suma de los valores de entrada para comprobar el valor del checksum
 2c2:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <I_RH>
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <D_RH>
 2cc:	ac 01       	movw	r20, r24
 2ce:	42 0f       	add	r20, r18
 2d0:	51 1d       	adc	r21, r1
 2d2:	9a 01       	movw	r18, r20
 2d4:	40 91 f0 01 	lds	r20, 0x01F0	; 0x8001f0 <I_Temp>
 2d8:	24 0f       	add	r18, r20
 2da:	31 1d       	adc	r19, r1
 2dc:	40 91 ef 01 	lds	r20, 0x01EF	; 0x8001ef <D_Temp>
 2e0:	24 0f       	add	r18, r20
 2e2:	31 1d       	adc	r19, r1
 2e4:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <CheckSum>
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	24 17       	cp	r18, r20
 2ec:	35 07       	cpc	r19, r21
 2ee:	29 f0       	breq	.+10     	; 0x2fa <updateHumidity+0x7a>
	{
		SerialPort_Send_String("ERROR EN EL SENSOR DE HUMEDAD!!!!");	//En el caso de error en la recepción de información informo el error por la termina serie
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
 2f8:	52 c0       	rjmp	.+164    	; 0x39e <updateHumidity+0x11e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2fa:	4a e0       	ldi	r20, 0x0A	; 10
 2fc:	be 01       	movw	r22, r28
 2fe:	6f 5f       	subi	r22, 0xFF	; 255
 300:	7f 4f       	sbci	r23, 0xFF	; 255
 302:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__itoa_ncheck>
	}
	else
	{
		itoa(I_RH,data,10);						//convierte la parte alta de la humedad(parte entera) en string
		SerialPort_Send_String("Humedad: ");	//Imprime Humedad
 306:	82 e2       	ldi	r24, 0x22	; 34
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		SerialPort_Send_String(data);			//Imprime la parte entera convertida a string
 30e:	ce 01       	movw	r24, r28
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		SerialPort_Send_String(".");
 316:	8c e2       	ldi	r24, 0x2C	; 44
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		itoa(D_RH,data,10);						//Convierte la parte baja de la humedad(parte decimal)en string
 31e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <D_RH>
 322:	4a e0       	ldi	r20, 0x0A	; 10
 324:	be 01       	movw	r22, r28
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__itoa_ncheck>
		SerialPort_Send_String(data);			//imprime la parte decimal convertida a string
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		SerialPort_Send_String("\r\n");				
 338:	8e e2       	ldi	r24, 0x2E	; 46
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		SerialPort_Send_String("Temperatura: ");
 340:	81 e3       	ldi	r24, 0x31	; 49
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		itoa(I_Temp,data,10);					//Convierte la parte alta de la temperatura(parte entera)en string	
 348:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <I_Temp>
 34c:	4a e0       	ldi	r20, 0x0A	; 10
 34e:	be 01       	movw	r22, r28
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__itoa_ncheck>
		SerialPort_Send_String(data);			//imprime la parte entera convertida a string
 35a:	ce 01       	movw	r24, r28
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		SerialPort_Send_String(".");
 362:	8c e2       	ldi	r24, 0x2C	; 44
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		itoa(D_Temp,data,10);					//Convierte la parte baja de la temperatura(parte decimal)en string
 36a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <D_Temp>
 36e:	4a e0       	ldi	r20, 0x0A	; 10
 370:	be 01       	movw	r22, r28
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__itoa_ncheck>
		SerialPort_Send_String(data);			//imprime la parte decimal convertida a string
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		SerialPort_Send_String("\r\n");
 384:	8e e2       	ldi	r24, 0x2E	; 46
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
		itoa(CheckSum,data,10);					//Convierte la parte alta(parte decimal)en string
 38c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <CheckSum>
 390:	4a e0       	ldi	r20, 0x0A	; 10
 392:	be 01       	movw	r22, r28
 394:	6f 5f       	subi	r22, 0xFF	; 255
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__itoa_ncheck>
	}
}
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <procesarEntrada>:
void procesarEntrada(){
	if(strcmp((char *) BufferRX,"ON") ==0){    //Verifica si el comando es "ON"
 3ae:	6f e3       	ldi	r22, 0x3F	; 63
 3b0:	71 e0       	ldi	r23, 0x01	; 1
 3b2:	85 e1       	ldi	r24, 0x15	; 21
 3b4:	92 e0       	ldi	r25, 0x02	; 2
 3b6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <strcmp>
 3ba:	89 2b       	or	r24, r25
 3bc:	39 f4       	brne	.+14     	; 0x3cc <procesarEntrada+0x1e>
		ON = true;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <ON+0x1>
 3c6:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <ON>
 3ca:	08 95       	ret
	}
	else if(strcmp((char *) BufferRX,"OFF") ==0){ //Verifica si el comando es "OFF"
 3cc:	62 e4       	ldi	r22, 0x42	; 66
 3ce:	71 e0       	ldi	r23, 0x01	; 1
 3d0:	85 e1       	ldi	r24, 0x15	; 21
 3d2:	92 e0       	ldi	r25, 0x02	; 2
 3d4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <strcmp>
 3d8:	89 2b       	or	r24, r25
 3da:	29 f4       	brne	.+10     	; 0x3e6 <procesarEntrada+0x38>
		ON = false;
 3dc:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <ON+0x1>
 3e0:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <ON>
 3e4:	08 95       	ret
	}
	else if(strcmp((char *) BufferRX,"RST") ==0){	//Verifica si el comando es "RST"
 3e6:	66 e4       	ldi	r22, 0x46	; 70
 3e8:	71 e0       	ldi	r23, 0x01	; 1
 3ea:	85 e1       	ldi	r24, 0x15	; 21
 3ec:	92 e0       	ldi	r25, 0x02	; 2
 3ee:	0e 94 68 02 	call	0x4d0	; 0x4d0 <strcmp>
 3f2:	89 2b       	or	r24, r25
 3f4:	39 f4       	brne	.+14     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		RST = true;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <RST+0x1>
 3fe:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <RST>
 402:	08 95       	ret
	}
	else {										//En el caso de que no es ninguno de las opciones validas, imprime comando invalido
		sprintf((char *) BufferTX,"%s","Comando no valido\n\r");
 404:	84 e1       	ldi	r24, 0x14	; 20
 406:	ea e4       	ldi	r30, 0x4A	; 74
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	a3 ef       	ldi	r26, 0xF3	; 243
 40c:	b1 e0       	ldi	r27, 0x01	; 1
 40e:	01 90       	ld	r0, Z+
 410:	0d 92       	st	X+, r0
 412:	8a 95       	dec	r24
 414:	e1 f7       	brne	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		SerialPort_Send_String(BufferTX);
 416:	83 ef       	ldi	r24, 0xF3	; 243
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
 41e:	08 95       	ret

00000420 <SerialPort_Init>:
		 //Inicializa USART
		 UCSR0B = (1<<TXEN0);               // Transmit Enable
		 UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);	//Tamaño de la cantidad de información trasmitida: 110 -> Character Size = 8 
		 UBRR0L = 103;						//baud rate = 9600bps@16MHz
		 while (! (UCSR0A & (1<<UDRE0)));   //wait until UDR0 is empty
}
 420:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 424:	96 e0       	ldi	r25, 0x06	; 6
 426:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 42a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 42e:	08 95       	ret

00000430 <SerialPort_TX_Enable>:
 430:	e1 ec       	ldi	r30, 0xC1	; 193
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	88 60       	ori	r24, 0x08	; 8
 438:	80 83       	st	Z, r24
 43a:	08 95       	ret

0000043c <SerialPort_RX_Enable>:
 43c:	e1 ec       	ldi	r30, 0xC1	; 193
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	80 61       	ori	r24, 0x10	; 16
 444:	80 83       	st	Z, r24
 446:	08 95       	ret

00000448 <SerialPort_RX_Interrupt_Enable>:
 448:	e1 ec       	ldi	r30, 0xC1	; 193
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	80 68       	ori	r24, 0x80	; 128
 450:	80 83       	st	Z, r24
 452:	08 95       	ret

00000454 <SerialPort_Wait_For_TX_Buffer_Free>:
 454:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 458:	85 ff       	sbrs	r24, 5
 45a:	fc cf       	rjmp	.-8      	; 0x454 <SerialPort_Wait_For_TX_Buffer_Free>
 45c:	08 95       	ret

0000045e <SerialPort_Send_Data>:
 45e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 462:	08 95       	ret

00000464 <SerialPort_Send_String>:
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	7c 01       	movw	r14, r24
 470:	c0 e0       	ldi	r28, 0x00	; 0
 472:	07 c0       	rjmp	.+14     	; 0x482 <SerialPort_Send_String+0x1e>
 474:	0e 94 2a 02 	call	0x454	; 0x454 <SerialPort_Wait_For_TX_Buffer_Free>
 478:	f8 01       	movw	r30, r16
 47a:	80 81       	ld	r24, Z
 47c:	0e 94 2f 02 	call	0x45e	; 0x45e <SerialPort_Send_Data>
 480:	cf 5f       	subi	r28, 0xFF	; 255
 482:	87 01       	movw	r16, r14
 484:	0c 0f       	add	r16, r28
 486:	11 1d       	adc	r17, r1
 488:	f8 01       	movw	r30, r16
 48a:	80 81       	ld	r24, Z
 48c:	81 11       	cpse	r24, r1
 48e:	f2 cf       	rjmp	.-28     	; 0x474 <SerialPort_Send_String+0x10>
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	08 95       	ret

0000049c <displayMenu>:
 49c:	8e e5       	ldi	r24, 0x5E	; 94
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
 4a4:	86 e6       	ldi	r24, 0x66	; 102
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
 4ac:	80 e9       	ldi	r24, 0x90	; 144
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
 4b4:	88 eb       	ldi	r24, 0xB8	; 184
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 32 02 	call	0x464	; 0x464 <SerialPort_Send_String>
 4bc:	08 95       	ret

000004be <setupSerialPort>:
/*
*Configuración de la terminal serie
*/
void setupSerialPort(int cod){
	SerialPort_Init(cod);
 4be:	0e 94 10 02 	call	0x420	; 0x420 <SerialPort_Init>
	SerialPort_TX_Enable();
 4c2:	0e 94 18 02 	call	0x430	; 0x430 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 4c6:	0e 94 1e 02 	call	0x43c	; 0x43c <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 4ca:	0e 94 24 02 	call	0x448	; 0x448 <SerialPort_RX_Interrupt_Enable>
 4ce:	08 95       	ret

000004d0 <strcmp>:
 4d0:	fb 01       	movw	r30, r22
 4d2:	dc 01       	movw	r26, r24
 4d4:	8d 91       	ld	r24, X+
 4d6:	01 90       	ld	r0, Z+
 4d8:	80 19       	sub	r24, r0
 4da:	01 10       	cpse	r0, r1
 4dc:	d9 f3       	breq	.-10     	; 0x4d4 <strcmp+0x4>
 4de:	99 0b       	sbc	r25, r25
 4e0:	08 95       	ret

000004e2 <__itoa_ncheck>:
 4e2:	bb 27       	eor	r27, r27
 4e4:	4a 30       	cpi	r20, 0x0A	; 10
 4e6:	31 f4       	brne	.+12     	; 0x4f4 <__itoa_ncheck+0x12>
 4e8:	99 23       	and	r25, r25
 4ea:	22 f4       	brpl	.+8      	; 0x4f4 <__itoa_ncheck+0x12>
 4ec:	bd e2       	ldi	r27, 0x2D	; 45
 4ee:	90 95       	com	r25
 4f0:	81 95       	neg	r24
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__utoa_common>

000004f8 <__utoa_ncheck>:
 4f8:	bb 27       	eor	r27, r27

000004fa <__utoa_common>:
 4fa:	fb 01       	movw	r30, r22
 4fc:	55 27       	eor	r21, r21
 4fe:	aa 27       	eor	r26, r26
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	aa 1f       	adc	r26, r26
 506:	a4 17       	cp	r26, r20
 508:	10 f0       	brcs	.+4      	; 0x50e <__utoa_common+0x14>
 50a:	a4 1b       	sub	r26, r20
 50c:	83 95       	inc	r24
 50e:	50 51       	subi	r21, 0x10	; 16
 510:	b9 f7       	brne	.-18     	; 0x500 <__utoa_common+0x6>
 512:	a0 5d       	subi	r26, 0xD0	; 208
 514:	aa 33       	cpi	r26, 0x3A	; 58
 516:	08 f0       	brcs	.+2      	; 0x51a <__utoa_common+0x20>
 518:	a9 5d       	subi	r26, 0xD9	; 217
 51a:	a1 93       	st	Z+, r26
 51c:	00 97       	sbiw	r24, 0x00	; 0
 51e:	79 f7       	brne	.-34     	; 0x4fe <__utoa_common+0x4>
 520:	b1 11       	cpse	r27, r1
 522:	b1 93       	st	Z+, r27
 524:	11 92       	st	Z+, r1
 526:	cb 01       	movw	r24, r22
 528:	0c 94 96 02 	jmp	0x52c	; 0x52c <strrev>

0000052c <strrev>:
 52c:	dc 01       	movw	r26, r24
 52e:	fc 01       	movw	r30, r24
 530:	67 2f       	mov	r22, r23
 532:	71 91       	ld	r23, Z+
 534:	77 23       	and	r23, r23
 536:	e1 f7       	brne	.-8      	; 0x530 <strrev+0x4>
 538:	32 97       	sbiw	r30, 0x02	; 2
 53a:	04 c0       	rjmp	.+8      	; 0x544 <strrev+0x18>
 53c:	7c 91       	ld	r23, X
 53e:	6d 93       	st	X+, r22
 540:	70 83       	st	Z, r23
 542:	62 91       	ld	r22, -Z
 544:	ae 17       	cp	r26, r30
 546:	bf 07       	cpc	r27, r31
 548:	c8 f3       	brcs	.-14     	; 0x53c <strrev+0x10>
 54a:	08 95       	ret

0000054c <_exit>:
 54c:	f8 94       	cli

0000054e <__stop_program>:
 54e:	ff cf       	rjmp	.-2      	; 0x54e <__stop_program>
